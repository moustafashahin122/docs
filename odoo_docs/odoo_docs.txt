

\{\{<a.*?\}\}


regex 
https://chat.openai.com/share/238ab334-2d67-445b-b477-d78c9a2347e5


*********************************************************_ in python ****************************************************************
https://www.python-engineer.com/posts/double-single-leading-underscore/


_  leading method name private not imported when "from xxx import *"
__ leading method name add class name to it "play() in class football ==> _football__play()


https://www.tutorialsteacher.com/python/public-private-protected-modifiers


*********************************************************kill odoo process****************************************************************


ps aux | grep odoo
sudo kill 12345
sudo kill -9 118115





*********************************************************regex****************************************************************


regex 

One2many\(['"]([\w.]+)['"].*?domain




git

To delete a remote branch
git push origin :branch_name



 To delete a local branch
git branch -d branch_name

remote branchs
git branch -r



 /opt/odoo16/odoo16-venv/bin/python3 /opt/odoo16/odoo16/odoo-bin -c /etc/odoo16.conf --dev all --log-level=debug --logfile= -d stage -u wallet


 /opt/odoo15/odoo15-venv/bin/python3 /opt/odoo15/odoo15/odoo-bin -c /etc/odoo15.conf -s --dev all --log-level=debug --logfile=
  /opt/odoo15/odoo15-venv/bin/python3 /opt/odoo15/odoo15/odoo-bin -c /etc/odoo15.conf   --log-level=debug --logfile= -d demo_15_approval  
/opt/odoo17/beta_17_env/bin/python3  /opt/odoo17/odoo17/odoo-bin  -c /etc/odoo_17_beta.conf --logfile= -d osama -p 8027


************************************************************domain**************************************************************************************
         domain and other must have " " except only in <attribute>
            
            
            
            
            
            
**********************************************image******************************************

Image size in odoo
                    <field name="image" string="Image" widget="image" options="{'size': [150, 150]}"/>






**********************************************statusbar******************************************
Before sheet

   <header>

                        <field name="status" widget="statusbar" options="{'clickable':'1'}" nolabel='1'/>
                    </header>


remove 
<field name = " status"/>

******************************* allow edit in tree view******************************************

<tree string="invoice_product" editable='bottom' >
<field name="invoice_id"/>
<field name="product_id"/>
<field name="price"/>
<field name="count"/>
<field name="total_price"/>
</tree>


*******************************using context to pass default values**********************************


Using context to pass default values

<record id="create_quotation_action" model="ir.actions.act_window">
    <field name="name">Create Quotation</field>
    <field name="res_model">workshop.quotation</field>
    <field name="view_mode">form</field>

   
</record>
 <header>
                        <button string="Create Quotation" name="%(automotive_workshop.create_quotation_action)d" type="action" context="{'default_inspection_order_id':active_id}" view_mode="form"/>
                    </header>

******************************* context in py *******************************
def action_quotation_send(self, cr, uid, ids, context=None):
    .......
    ctx.update({
        'default_model': 'sale.order',
        'default_res_id': ids[0],
        'default_use_template': bool(template_id),
        'default_template_id': template_id,
        'default_composition_mode': 'comment',
        'mark_so_as_sent': True
    })
    return {
        'type': 'ir.actions.act_window',
        'view_type': 'form',
        'view_mode': 'form',
        'res_model': 'mail.compose.message',
        'views': [(compose_form_id, 'form')],
        'view_id': compose_form_id,
        'target': 'new',
        'context': ctx,
    }


******************************* add chatter  *******************************




in model

    _inherit = ['mail.thread','mail.activity.mixin']
and add tracking = True to fields
in view after sheet

                    <!-- Chatter -->
                    <div class="oe_chatter">
                        <field name="message_follower_ids" groups="base.group_user"/>
                        <field name="activity_ids"/>
                        <field name="message_ids"/>
                    </div>



****************************** git ignore some files ************************************

to ignore .pyc files 
*.pyc

To remove them from the repository but keep them locally, you can use the following commands:
git rm --cached '*.pyc'


****************************** monetary field ************************************
    currency_id = fields.Many2one('res.currency',string="Currency") 


	price = fields.Monetary(string='Price', required=True,currency_field='currency_id',tracking=True)
              <field name="total_cheques_amount" widget="monetary" />


****************************** return a view from py ************************************
    
    
    
    
    def action_view_quotation(self):
        self.ensure_one()
        quotations = self.env['workshop.quotation'].search([
            ('inspection_order_id', '=', self.id)]).ids
        # quotations = quotations.mapped('id')
        return {
            'name': _('Quotations'),
            'type': 'ir.actions.act_window',
            'view_mode': 'tree,form',
            'res_model': 'workshop.quotation',
            'domain': [('id', 'in', quotations)],
            'target':'new'
        }
        
        
        
        
        
        
        
        
****************************** another example ************************************
        def action_create_quotation(self):
        self.ensure_one()

        return {
            'name': _('Quotation'),
            'type': 'ir.actions.act_window',
            'view_mode': 'form',
            'res_model': 'workshop.quotation',
            'context': {'default_inspection_order_id':self.id}
        }


****************************** hide something based on value in context ************************************
        <button string="Create repair order" invisible="context.get('hide_repair_order_button')" name="%(automotive_workshop.create_repair_order_action)d" type="action" context="{'default_quotation_id':active_id}" view_mode="form"/>

****************************** Smart Buttons ************************************



    quotation_count = fields.Integer('Quotation Count', compute="_compute_quotation_count",default=0)


    def _compute_quotation_count(self):

        for rec in self:




            rec.quotation_count = self.env['workshop.quotation'].search_count([('inspection_order_id','=',rec.id)])

    def action_view_quotation(self):
        self.ensure_one()
        quotations = self.env['workshop.quotation'].search([
            ('inspection_order_id', '=', self.id)]).ids
        # quotations = quotations.mapped('id')
        return {
            'name': _('Quotations'),
            'type': 'ir.actions.act_window',
            'view_mode': 'tree,form',
            'res_model': 'workshop.quotation',
            'domain': [('id', 'in', quotations)],
        }




  <sheet>
                <div class="oe_button_box" name="button_box">
        <button name="action_view_quotation" type="object" class="oe_stat_button" icon="fa-pencil-square-o" attrs="{'invisible': [('quotation_count', '=', 0)]}">
                                <field name="quotation_count" widget="statinfo" string="Quotations"/>
                            </button>
                        </div>


****************************** compute function ************************************
    car_id = fields.Many2one('workshop.car', string='Car',compute="_compute_car_id",tracking=True)



    @api.depends('inspection_order_id')
    def _compute_car_id(self):
        for rec in self:
            if rec.inspection_order_id:
                print("*******************self**********",rec)
                print("rec*******************",rec.inspection_order_id)
                rec.car_id = rec.inspection_order_id.car_id
            else:
            
                rec.car_id = False
    def action_create_repair_order(self):
        self.ensure_one()


****************************** vs code debugger ************************************




{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Odoo",
            "type": "python",
            "request": "launch",
            "program": "/opt/odoo16/odoo16/odoo-bin",
            "pythonPath": "/opt/odoo16/odoo16-venv/bin/python3",
            "args": [
                "-c",
                "/etc/odoo16.conf",
                "--dev",
                "all",
                "--log-level=debug",
                "--logfile=",
                "-d",
                "stage",
                "-u",
                "wallet"
            ],
            "cwd": "${workspaceFolder}",
            "env": {},
            "envFile": "${workspaceFolder}/.env",
            "debugOptions": [
                "WaitOnAbnormalExit",
                "WaitOnNormalExit",
                "RedirectOutput"
            ]
        },
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": true
        }
    ]
}
****************************** ordering ************************************



    _order='sequence'
    sequence=fields.Integer(string='Sequence',default=0)


****************************** Postgres *******************************





\du list all users













*********************************** ++++++++++++++++++++++++++++++++ ************************************
In Odoo, you can add attributes to the relation in a many-to-many field using the `relation` parameter. These attributes can be used to store additional information about the relationship between records. Here's how you can add attributes to a many-to-many relationship:

Let's extend the previous example with attributes for the many-to-many relationship between `Course` and `Student`. We'll add an attribute called `attendance` to store attendance information for each student in a course.

```python
from odoo import models, fields

class Course(models.Model):
    _name = 'your_module.course'
    _description = 'Course Model'

    name = fields.Char(string='Course Name', required=True)
    students = fields.Many2many(
        'your_module.student',
        'course_student_rel',
        'course_id',
        'student_id',
        string='Students',
        relation='your_module.course_student_relation'  # Set the relation name
    )

class Student(models.Model):
    _name = 'your_module.student'
    _description = 'Student Model'

    name = fields.Char(string='Student Name', required=True)
    courses = fields.Many2many(
        'your_module.course',
        'course_student_rel',
        'student_id',
        'course_id',
        string='Courses',
        relation='your_module.course_student_relation'  # Set the relation name
    )

class CourseStudentRelation(models.Model):
    _name = 'your_module.course_student_relation'
    _description = 'Course-Student Relation'

    course_id = fields.Many2one('your_module.course', string='Course')
    student_id = fields.Many2one('your_module.student', string='Student')
    attendance = fields.Float(string='Attendance Percentage')
```

In this extended example:

1. We add a new model, `CourseStudentRelation`, to represent the many-to-many relationship between `Course` and `Student`. This model contains an additional field called `attendance` to store the attendance percentage for each student in a course.

2. In the `Course` and `Student` models, we set the `relation` parameter in the `Many2many` field to specify the name of the model that defines the relationship (`'your_module.course_student_relation'`).

Now you can use the `attendance` field to store and retrieve attendance information for each student in a course. For example:

```python
# Create a student
student = self.env['your_module.student'].create({'name': 'John Doe'})

# Create a course
course = self.env['your_module.course'].create({'name': 'Mathematics'})

# Add the student to the course with attendance information
course.students = [(4, student.id, {'attendance': 90.0})]

# Retrieve the attendance information for a student in a course
attendance_percentage = student.courses.filtered(lambda c: c.id == course.id).attendance
```

This allows you to store and access attributes associated with the many-to-many relationship between `Course` and `Student`.








****************************** widgets ************************************
                            <field name="user_id" widget="many2one_avatar_user"/>

****************************** search view *******************************

                    <filter name="group_by_stage_id" string="stage_id" context="{'group_by': 'stage_id'}" />

            <field name="context">{'search_default_group_by_stage_id':1}</field>
            
            
                            <filter name="filter_my_contracts" string="My Contracts"
                    domain="[('user_id', '=', uid)]" />
                    
                    
                    
                    
        if vals.get(['employee_comment'],False) and (self.employee_id.user_id.id == self.env.context.get('uid')):





*********************************** sequence ************************************


    contract_code = fields.Char(string='Contact Code',readonly=True)

    @api.model
    def create(self,vals):
        vals['contract_code']= self.env['ir.sequence'].next_by_code('contract.contract')
        return super(ContractContract,self).create(vals)




        <record id="contract_contract_seq" model="ir.sequence">
            <field name="name">Contract Sequence</field>
            <field name="code">contract.contract</field>
            <field name="prefix">CT</field>
            <field name="padding">5</field>
            <field name="company_id" eval="False" />
        </record>






****************************** deafault ************************************
    booking_date = fields.Date('Booking Date', default=lambda self: fields.Date.today())
    default_booking_date = fields.Date(default=lambda self: fields.Date.today() + timedelta(days=7))

    
   +++++++++
   default get
   +++++++++++

    def _get_default_stage(self):
        default_stage_id = self.env['contract.stage'].search([], limit=1)
        return default_stage_id
    stage_id = fields.Many2one('contract.stage', string='Stage',default=_get_default_stage)


****************************** search view **********************************

    <record id="view_account_move_filter" model="ir.ui.view">
            <field name="name">account.move.select</field>
            <field name="model">account.move</field>
            <field name="arch" type="xml">
                <search string="Search Move">
                    <field name="name" string="Journal Entry" filter_domain="['|', '|', ('name', 'ilike', self), ('ref', 'ilike', self), ('partner_id', 'ilike', self)]"/>
                    <field name="date"/>
                    <field name="partner_id"/>
                    <field name="journal_id"/>
                    <filter string="Unposted" name="unposted" domain="[('state', '=', 'draft')]" help="Unposted Journal Entries"/>
                    <filter string="Posted" name="posted" domain="[('state', '=', 'posted')]" help="Posted Journal Entries"/>
                    <separator/>
                    <filter string="Reversed" name="reversed" domain="[('payment_state', '=', 'reversed')]"/>
                    <separator/>
                    <filter string="To Check" name="to_check" domain="[('to_check', '=', True)]"/>
                    <separator/>
                    <filter string="Sales" name="sales" domain="[('journal_id.type', '=', 'sale')]" context="{'default_journal_type': 'sale'}"/>
                    <filter string="Purchases" name="purchases" domain="[('journal_id.type', '=', 'purchase')]" context="{'default_journal_type': 'purchase'}"/>
                    <filter string="Bank" name="bankoperations" domain="[('journal_id.type', '=', 'bank')]" context="{'default_journal_type': 'bank'}"/>
                    <filter string="Cash" name="cashoperations" domain="[('journal_id.type', '=', 'cash')]" context="{'default_journal_type': 'cash'}"/>
                    <filter string="Miscellaneous" name="misc_filter" domain="[('journal_id.type', '=', 'general')]" context="{'default_journal_type': 'general'}"/>
                    <separator/>
                    <filter string="Date" name="date" date="date"/>
                    <separator/>
                    <group expand="0" string="Group By">
                        <filter string="Partner" name="partner" domain="[]" context="{'group_by': 'partner_id'}"/>
                        <filter string="Journal" name="journal" domain="[]" context="{'group_by': 'journal_id'}"/>
                        <filter string="Status" name="status" domain="[]" context="{'group_by': 'state'}"/>
                        <filter string="Date" name="by_date" domain="[]" context="{'group_by': 'date'}" help="Journal Entries by Date"/>
                        <filter string="Company" name="by_company" domain="[]" context="{'group_by': 'company_id'}" groups="base.group_multi_company"/>
                    </group>
                </search>
            </field>
        </record>










******************************** filter one2many field ************************************



    step_ids= fields.One2many('contract.step',inverse_name="contract_id",string="Contract Step",store=True)

    stage_step_ids= fields.One2many('contract.step',inverse_name="contract_id",string="Contract Step",compute="_compute_stage_steps_ids")



    
    @api.depends('step_ids')
    def _compute_stage_steps_ids(self):
        for rec in self:
            rec.stage_step_ids=rec.step_ids.filtered_domain([('stage_id','=',rec.stage_id.id)])
        print("*********************************************************************")

****************************** errors ************************************
 from odoo.exceptions import ValidationError,UserError

            raise UserError('Requests Created Successfully')

                raise ValidationError(_("You can't associate a contract with an active related sale order."))


from odoo.exceptions import UserError
                raise UserError(_("There are multiple active contracts for this sale order."))
****************************** notification ***********************************
                'type': 'warning',
                
                                'type': 'success',
    def showwarning(self):
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'type': 'info',
                
                'message': _("Two-factor authentication disabled for the following user(s)"),
                'next': {'type': 'ir.actions.act_window_close'},
            }
        }



******************************* ++++++++++++++++++++++++++++++++ ************************************
html_rp=rp_temp._render_template(rp_temp.body_html,'contract.contract',[53])
rp_temp=self.env['rp.template'].browse(3)
****************************** api.constrains ************************************
from odoo import models, fields, api
from odoo.exceptions import ValidationError

class YourModel(models.Model):
    _name = 'your.model'

    field1 = fields.Char(string='Field 1')
    field2 = fields.Char(string='Field 2')

    @api.constrains('field1', 'field2')
    def _check_at_least_one_field_has_value(self):
        for record in self:
            if not (record.field1 or record.field2):
                raise ValidationError("At least one of Field 1 or Field 2 must have a value.")
****************************** ++++++++++++++++++++++++++++++++ ***********************************

<div class="oe_title">
                        <h1>
                            <field name="name" readonly="1"/>
                        </h1>
                    </div>





******************************* uniqe ************************************

    _sql_constraints = [
        ('Unique_Contract_Partner', 'UNIQUE(contract_id,partner_id)', 'this partner already exists for this contract')
    ]
****************************** on line if ************************************
value_if_true if condition else value_if_false

****************************** ++++++++++++++++++++++++++++++++ ******************************
    @api.depends('stage_step_ids.step_status')
    def _compute_stage_complete(self):
        self.stage_complete=True if len(self.stage_step_ids.filtered_domain([('step_status','!=','accepted')])) == 0 else False


    stage_complete = fields.Boolean('Stage Complete',compute="_compute_stage_complete",default=False)


************************************ ++++++++++++++++++++++++++++++++ ************************************
<?xml version="1.0" encoding="utf-8"?>
<odoo>


    <data>
        <record id="ir_cron_scheduler_recurring_action" model="ir.cron">
            <field name="name">Update Missing Duration</field>
            <field name="model_id" ref="model_contract_contract" />
            <field name="state">code</field>
            <field name="code"> model.comput_stage_missing()</field>

            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="numbercall">-1</field>
            <field name="doall">True</field>
            <field name="nextcall"
                eval="(DateTime.now().replace(hour=22,minute=1,second=0) ).strftime('%Y-%m-%d %H:%M:%S')" />
        </record>


    </data>


</odoo>
****************************** ribbon ************************************
                        <widget name="web_ribbon" title="illegal" bg_color="bg-danger"
                            attrs="{'invisible': [ ('illegal', '=', False)]}" />
****************************** ++++++++++++++++++++++++++++++++ **********************************














                    <button name="confirm_payment_plan" type="object" string="Confirm"
                        class="btn-secondary" attrs="{'invisible': [('stage', '!=', 'draft')]}" />
                    <button name="generate_plan_requests" type="object" string="Generate Requests"
                        class="btn-secondary" attrs="{'invisible': [('stage', '!=', 'confirmed')]}" />





in payment plan

    stage = fields.Selection([
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('pending', 'Pending'),
        ('approved', 'Approved'),
    ], string='Stage',default='draft')

    
    type_id = fields.Many2one('multi.approval.type', string='Approve Type', required=True)
    
    
    
    
    
    def confirm_payment_plan(self):
        for rec in self:
            rec.stage='confirmed'



























******************************** ++++++++++++++++++++++++++++++++ ************************************

                <xpath
                    expr="//group[1]/field[@name='priceflist' or position() = 1]"
                    position="after">
                   <field name="type_id" />
                </xpath>



****************************** calling a specifc function not tested  super * ***********************************

 
from odoo import models, fields, api

class Base1(models.Model):
    _name = 'your_module.base1'

    def some_method(self):
        print("Base1 method")
        return True

class Base2(models.Model):
    _name = 'your_module.base2'

    def some_method(self):
        print("Base2 method")
        return True

class Derived(models.Model):
    _name = 'your_module.derived'
    _inherit = ['your_module.base1', 'your_module.base2']

    def call_base1_method(self):
        # Call the specific method of Base1 using the class name
        Base1.some_method(self)

****************************** ++++++++++++++++++++++++++++++++ ******************************
            <tree string="Approvals"
                decoration-success="state == 'Approved'"
                decoration-danger="state == 'Refused'"
                decoration-info="state == 'Submitted'"
                decoration-warning="state == 'Cancel'">
                <field name="priority" widget="priority" />
                <field name="code" />
                <field name="name" />
                <field name="user_id" />
                <field name="request_date" />
                <field name="pic_id" />
                <field name="deadline" />
                <field name="state" widget="badge"
                    decoration-success="state == 'Approved'"
                    decoration-danger="state == 'Refused'"
                    decoration-info="state == 'Submitted'"
                    decoration-warning="state == 'Cancel'" />
            </tree>



************************************ window action ************************************


    def create_action(self):
        ActWindow = self.env['ir.actions.act_window']
        view = self.env.ref('mail.email_compose_message_wizard_form')

        for template in self:
            button_name = _('Send Mail (%s)', template.name)
            action = ActWindow.create({ 
                'name': button_name,
                'type': 'ir.actions.act_window',
                'res_model': 'mail.compose.message',
                'context': "{'default_composition_mode': 'mass_mail', 'default_template_id' : %d, 'default_use_template': True}" % (template.id),
                'view_mode': 'form,tree',
                'view_id': view.id,
                'target': 'new',
                'binding_model_id': template.model_id.id,
            })
            template.write({'ref_ir_act_window': action.id})

        return True

****************************** database backup ************************************


https://www.odoo.com/ar/forum/lms-d-1/how-can-i-take-back-of-database-by-terminal-101505


****************************** ++++++++++++++++++++++++++++++++ *****************************
<tree edit="0" create="0">


************************************* Kanban ************************************
  <field name="unit_ids" string="Units"
                                    domain="[('is_real_estate','=', True),('state','=','available')]">

                                    <kanban sample="1">
                                        <field name="id" />
                                        <field name="product_variant_count" />
                                        <field name="currency_id" />
                                        <field name="activity_state" />
                                        <progressbar field="activity_state"
                                            colors="{&quot;planned&quot;: &quot;success&quot;, &quot;today&quot;: &quot;warning&quot;, &quot;overdue&quot;: &quot;danger&quot;}" />
                                        <templates>
                                            <t t-name="kanban-box">
                                                <div
                                                    class="oe_kanban_card oe_kanban_global_click">
                                                    <div class="o_kanban_image mr-1">
                                                        <img
                                                            t-att-src="kanban_image('product.template', 'image_128', record.id.raw_value)"
                                                            alt="Product"
                                                            class="o_image_64_contain" />
                                                    </div>
                                                    <div class="oe_kanban_details">

                                                        <div class="o_kanban_record_top mb-0">
                                                            <div
                                                                class="oe_kanban_top_right">
                                                                <strong
                                                                    class="o_kanban_record_title">
                                                                    <field name="name" />
                                                                </strong>
                                                            </div>
                                                            <div class="oe_kanban_top_left">
                                                                <field name="state"
                                                                    widget="label_selection"
                                                                    options="{'classes': {'registered': 'default', 'available': 'primary','booked': 'warning','contracted':'success','delivered':'success'}}" />
                                                            </div>


                                                        </div>


                                                        <div name="product_lst_price"
                                                            class="mt-1"> Price: <field
                                                                name="list_price"
                                                                widget="monetary"
                                                                options="{'currency_field': 'currency_id', 'field_digits': True}" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </t>
                                        </templates>
                                    </kanban>
****************************** ++++++++++++++++++++++++++++++++ ************************************
//date

end_of_the_day = datetime.combine(rec.day_date, datetime.max.time())


//datetime
            # begin_of_the_day = rec.day_date.replace(hour=0, minute=0, second=0, microsecond=0).strftime('%Y-%m-%d %H:%M:%S')

            # begin_of_the_day = rec.day_date.replace(hour=0, minute=0, second=0, microsecond=0).strftime('%Y-%m-%d %H:%M:%S')




****************************** tree view header **********************************
////////// must select records to show


    <record id="stock_valuation_layer_tree_inherit" model="ir.ui.view">
        <field name="name">stock.valuation.layer.tree.inherit</field>
        <field name="model">stock.valuation.layer</field>
        <field name="inherit_id" ref="stock_account.stock_valuation_layer_tree" />
        <field name="arch" type="xml">
            <xpath expr="//tree[1]" position="inside">
                <header>

                    <button string="compensate" name="compensate_selected" type="object"
                        class="oe_highlight" />
                </header>
            </xpath>
        </field>
    </record>


******************************** currency ************************************

    company_id = fields.Many2one(
            'res.company', 'Company',
            default=lambda self: self.env.company.id, index=1)
    currency_id = fields.Many2one(
            'res.currency', 'Currency',
            default=lambda self: self.env.company.currency_id.id,
            required=True)
****************************** wizard ************************************


                </sheet>


                <footer>
                    <button name="action_validate_revaluation" string="Revalue" type="object"
                        class="btn-primary" data-hotkey="q" />
                    <button string="Cancel" class="btn-secondary" special="cancel" data-hotkey="z" />
                </footer>
            </form>
        </field>
    </record>
****************************** configuration 17 *********************************




{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Odoo_beta_17",
            "type": "python",
            "request": "launch",
            "program": "/opt/odoo17/odoo17/odoo-bin",
            "python": "/opt/odoo17/beta_17_env/bin/python3",
            // "justMyCode": true,
            "args": [
                "-c",
                "/etc/odoo_17_beta.conf",
                "--dev",
                "all",
                "--log-level=debug",
                "--logfile=",
                "-d",
                "osama",
                "-u",
                "attendance_advanced",
                // "analyze_attendance_by_day,hr_advanced_validation,hr_raw_zte_attendance,attendance_advanced,real_estate_payments_advanced,contract_management,approvals_for_multiple_things,multi_level_approval,real_estate_payments",
                // "contract_management,real_estate_payments,real_estate_payments_advanced,multi_level_approval ,attendance_advanced"
            ],
            "console": "internalConsole",
            "redirectOutput": true,
            "cwd": "${workspaceFolder}",
            "env": {},
            "envFile": "${workspaceFolder}/.env",
        },
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": true
        }
    ]
}







********************************* ++++++++++++++++++++++++++++++++ ************************************



you can make onchange on computed field
****************************** readonly but not for a specific group ************************************




                        <field name="employee_id" readonly="1" />
                        <field name="employee_id"
                            groups="hr_payroll_community.group_hr_payroll_community_user" />
****************************** ++++++++++++++++++++++++++++++++ *******************************

is instant of



 import datetime

            attendance_date= attendance if isinstance(attendance, datetime.date) else attendance.check_in.date()


*********************************** ++++++++++++++++++++++++++++++++ ************************************




            <xpath expr="//button[@name='%(hr_payroll_community.action_hr_payslip_by_employees)d']"
                position="before">
                <button string="Generate Payslips"
                    name="%(action_hr_payslip_by_employees_with_exclusions)d" type="action"
                    class="oe_highlight" />
            </xpath>
            <xpath expr="//button[@name='%(hr_payroll_community.action_hr_payslip_by_employees)d']"
                position="attributes">
                <attribute name="invisible">1</attribute>
            </xpath>





****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
