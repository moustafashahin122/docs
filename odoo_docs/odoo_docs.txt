dependency check

odoo_analyse --path /opt/odoo17/odoo17/epm-betaegypt/metrics_enterprise/ --show-dependency --skip-assets --skip-data --skip-language --skip-readme


odoo_analyse -c /etc/odoo_17_beta.conf --show-dependency --skip-all


*******************************************************************
test report
'["/report/pdf/multi_product_select.tb_invoice/554704","qweb-pdf"]'


*********************************************************************

disable cors

google-chrome --disable-web-security --user-data-dir="/tmp/chrome_dev"

*************************************************************************************************************************************




\{\{<a.*?\}\}


regex 
https://chat.openai.com/share/238ab334-2d67-445b-b477-d78c9a2347e5


*********************************************************_ in python ****************************************************************
https://www.python-engineer.com/posts/double-single-leading-underscore/


_  leading method name private not imported when "from xxx import *"
__ leading method name add class name to it "play() in class football ==> _football__play()


https://www.tutorialsteacher.com/python/public-private-protected-modifiers


*********************************************************kill odoo process****************************************************************
ssh -T git@github.com

ps aux | grep odoo
sudo kill 12345
sudo kill -9 118115

*********************************************************submodule****************************************************************











(beta_env) metrics@shahin:/opt/odoo15/odoo15/epm-betaegypt$ git submodule add --force -b 15.0 git@github.com:Metrics-eg/odoo-paymob.git metrics_enterprise/wt_payment_paymob



git submodule update







*********************************************************clone submodule****************************************************************


git clone --recurse-submodules https://github.com/chaconinc/MainProject

or clone then git git submodule init and git submodule update 

*********************************************************regex****************************************************************


regex 

One2many\(['"]([\w.]+)['"].*?domain




git

To delete a remote branch
git push origin :branch_name



 To delete a local branch
git branch -d branch_name

remote branchs
git branch -r



 /opt/odoo16/odoo16-venv/bin/python3 /opt/odoo16/odoo16/odoo-bin -c /etc/odoo16.conf --dev all --log-level=debug --logfile= -d stage -u wallet




/opt/odoo17/beta_17_env/bin/python3  /opt/odoo17/odoo17/odoo-bin  -c /etc/odoo_17_beta.conf --logfile= -d osama -p 8027

/opt/odoo15/beta_env/bin/python3  /opt/odoo15/odoo15/odoo-bin -c /etc/odoo_15_beta.conf --logfile= -d  -p 8025



************************************************************domain**************************************************************************************
         domain and other must have " " except only in <attribute>
            
            
            
            
            
            
**********************************************image******************************************

Image size in odoo
                    <field name="image" string="Image" widget="image" options="{'size': [150, 150]}"/>






**********************************************statusbar******************************************
Before sheet

   <header>

                        <field name="status" widget="statusbar" options="{'clickable':'1'}" nolabel='1'/>
                    </header>


remove 
<field name = " status"/>

******************************* allow edit in tree view******************************************

<tree string="invoice_product" editable='bottom' >
<field name="invoice_id"/>
<field name="product_id"/>
<field name="price"/>
<field name="count"/>
<field name="total_price"/>
</tree>


*******************************using context to pass default values**********************************


Using context to pass default values

<record id="create_quotation_action" model="ir.actions.act_window">
    <field name="name">Create Quotation</field>
    <field name="res_model">workshop.quotation</field>
    <field name="view_mode">form</field>

   
</record>
 <header>
                        <button string="Create Quotation" name="%(automotive_workshop.create_quotation_action)d" type="action" context="{'default_inspection_order_id':active_id}" view_mode="form"/>
                    </header>

******************************* context in py *******************************
def action_quotation_send(self, cr, uid, ids, context=None):
    .......
    ctx.update({
        'default_model': 'sale.order',
        'default_res_id': ids[0],
        'default_use_template': bool(template_id),
        'default_template_id': template_id,
        'default_composition_mode': 'comment',
        'mark_so_as_sent': True
    })
    return {
        'type': 'ir.actions.act_window',
        'view_type': 'form',
        'view_mode': 'form',
        'res_model': 'mail.compose.message',
        'views': [(compose_form_id, 'form')],
        'view_id': compose_form_id,
        'target': 'new',
        'context': ctx,
    }


******************************* add chatter  *******************************




in model

    _inherit = ['mail.thread','mail.activity.mixin']
and add tracking = True to fields
in view after sheet

                    <!-- Chatter -->
                    <div class="oe_chatter">
                        <field name="message_follower_ids" groups="base.group_user"/>
                        <field name="activity_ids"/>
                        <field name="message_ids"/>
                    </div>



****************************** git ignore some files ************************************

to ignore .pyc files 
*.pyc

To remove them from the repository but keep them locally, you can use the following commands:
git rm --cached '*.pyc'


****************************** monetary field ************************************
    currency_id = fields.Many2one('res.currency',string="Currency") 

    currency_id = fields.Many2one('res.currency', default=lambda self: self.env.company.currency_id)

	price = fields.Monetary(string='Price', required=True,currency_field='currency_id',tracking=True)
              <field name="total_cheques_amount" widget="monetary" />


****************************** return a view from py ************************************
    
    
    
    
    def action_view_quotation(self):
        self.ensure_one()
        quotations = self.env['workshop.quotation'].search([
            ('inspection_order_id', '=', self.id)]).ids
        # quotations = quotations.mapped('id')
        return {
            'name': _('Quotations'),
            'type': 'ir.actions.act_window',
            'view_mode': 'tree,form',
            'res_model': 'workshop.quotation',
            'domain': [('id', 'in', quotations)],
            'target':'new'
        }
        
        
        
        
        
        
        
        
****************************** another example ************************************
        def action_create_quotation(self):
        self.ensure_one()

        return {
            'name': _('Quotation'),
            'type': 'ir.actions.act_window',
            'view_mode': 'form',
            'res_model': 'workshop.quotation',
            'context': {'default_inspection_order_id':self.id}
        }


****************************** hide something based on value in context ************************************
        <button string="Create repair order" invisible="context.get('hide_repair_order_button')" name="%(automotive_workshop.create_repair_order_action)d" type="action" context="{'default_quotation_id':active_id}" view_mode="form"/>

****************************** Smart Buttons ************************************



    quotation_count = fields.Integer('Quotation Count', compute="_compute_quotation_count",default=0)


    def _compute_quotation_count(self):

        for rec in self:




            rec.quotation_count = self.env['workshop.quotation'].search_count([('inspection_order_id','=',rec.id)])

    def action_view_quotation(self):
        self.ensure_one()
        quotations = self.env['workshop.quotation'].search([
            ('inspection_order_id', '=', self.id)]).ids
        # quotations = quotations.mapped('id')
        return {
            'name': _('Quotations'),
            'type': 'ir.actions.act_window',
            'view_mode': 'tree,form',
            'res_model': 'workshop.quotation',
            'domain': [('id', 'in', quotations)],
        }



#########################........Odoo 15 .........########################################
  <sheet>
                <div class="oe_button_box" name="button_box">
        <button name="action_view_quotation" type="object" class="oe_stat_button" icon="fa-pencil-square-o" attrs="{'invisible': [('quotation_count', '=', 0)]}">
                                <field name="quotation_count" widget="statinfo" string="Quotations"/>
                            </button>
                        </div>
#########################........Odoo 17 .........########################################
     <div class="oe_button_box" name="button_box">
                        <button name="action_view_invoices" type="object" class="oe_stat_button" icon="fa-pencil-square-o" invisible ="invoice_count == 0">
                            <field name="invoice_count" widget="statinfo" string="Inovices"/>
                        </button>
                    </div>
****************************** compute function ************************************
    car_id = fields.Many2one('workshop.car', string='Car',compute="_compute_car_id",tracking=True)



    @api.depends('inspection_order_id')
    def _compute_car_id(self):
        for rec in self:
            if rec.inspection_order_id:
                print("*******************self**********",rec)
                print("rec*******************",rec.inspection_order_id)
                rec.car_id = rec.inspection_order_id.car_id
            else:
            
                rec.car_id = False
    def action_create_repair_order(self):
        self.ensure_one()


****************************************************smart button without count *************************************************************
 <button name="action_open_original" type="object" class="oe_stat_button"
                    icon="fa-pencil-square-o" invisible="not original_structure_id">
                    <div class="o_stat_info">
                        <span class="o_stat_text">
                            Original Structure
                        </span>

                    </div>
                    <!-- <field name="variants_count" widget="statinfo" string="Original" /> -->
                </button>











****************************** vs code debugger ************************************




{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Odoo",
            "type": "python",
            "request": "launch",
            "program": "/opt/odoo16/odoo16/odoo-bin",
            "pythonPath": "/opt/odoo16/odoo16-venv/bin/python3",
            "args": [
                "-c",
                "/etc/odoo16.conf",
                "--dev",
                "all",
                "--log-level=debug",
                "--logfile=",
                "-d",
                "stage",
                "-u",
                "wallet"
            ],
            "cwd": "${workspaceFolder}",
            "env": {},
            "envFile": "${workspaceFolder}/.env",
            "debugOptions": [
                "WaitOnAbnormalExit",
                "WaitOnNormalExit",
                "RedirectOutput"
            ]
        },
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": true
        }
    ]
}
****************************** ordering ************************************



    _order='sequence'
    sequence=fields.Integer(string='Sequence',default=0)


****************************** Postgres *******************************





\du list all users













*********************************** ++++++++++++++++++++++++++++++++ ************************************
In Odoo, you can add attributes to the relation in a many-to-many field using the `relation` parameter. These attributes can be used to store additional information about the relationship between records. Here's how you can add attributes to a many-to-many relationship:

Let's extend the previous example with attributes for the many-to-many relationship between `Course` and `Student`. We'll add an attribute called `attendance` to store attendance information for each student in a course.

```python
from odoo import models, fields

class Course(models.Model):
    _name = 'your_module.course'
    _description = 'Course Model'

    name = fields.Char(string='Course Name', required=True)
    students = fields.Many2many(
        'your_module.student',
        'course_student_rel',
        'course_id',
        'student_id',
        string='Students',
        relation='your_module.course_student_relation'  # Set the relation name
    )

class Student(models.Model):
    _name = 'your_module.student'
    _description = 'Student Model'

    name = fields.Char(string='Student Name', required=True)
    courses = fields.Many2many(
        'your_module.course',
        'course_student_rel',
        'student_id',
        'course_id',
        string='Courses',
        relation='your_module.course_student_relation'  # Set the relation name
    )

class CourseStudentRelation(models.Model):
    _name = 'your_module.course_student_relation'
    _description = 'Course-Student Relation'

    course_id = fields.Many2one('your_module.course', string='Course')
    student_id = fields.Many2one('your_module.student', string='Student')
    attendance = fields.Float(string='Attendance Percentage')
```

In this extended example:

1. We add a new model, `CourseStudentRelation`, to represent the many-to-many relationship between `Course` and `Student`. This model contains an additional field called `attendance` to store the attendance percentage for each student in a course.

2. In the `Course` and `Student` models, we set the `relation` parameter in the `Many2many` field to specify the name of the model that defines the relationship (`'your_module.course_student_relation'`).

Now you can use the `attendance` field to store and retrieve attendance information for each student in a course. For example:

```python
# Create a student
student = self.env['your_module.student'].create({'name': 'John Doe'})

# Create a course
course = self.env['your_module.course'].create({'name': 'Mathematics'})

# Add the student to the course with attendance information
course.students = [(4, student.id, {'attendance': 90.0})]

# Retrieve the attendance information for a student in a course
attendance_percentage = student.courses.filtered(lambda c: c.id == course.id).attendance
```

This allows you to store and access attributes associated with the many-to-many relationship between `Course` and `Student`.








****************************** widgets ************************************
                            <field name="user_id" widget="many2one_avatar_user"/>

****************************** search view *******************************

                    <filter name="group_by_stage_id" string="stage_id" context="{'group_by': 'stage_id'}" />

            <field name="context">{'search_default_group_by_stage_id':1}</field>
            
            
                            <filter name="filter_my_contracts" string="My Contracts"
                    domain="[('user_id', '=', uid)]" />
                    
                    
                    
                    
        if vals.get(['employee_comment'],False) and (self.employee_id.user_id.id == self.env.context.get('uid')):





*********************************** sequence ************************************


    contract_code = fields.Char(string='Contact Code',readonly=True)

    @api.model
    def create(self,vals):
        vals['contract_code']= self.env['ir.sequence'].next_by_code('contract.contract')
        return super(ContractContract,self).create(vals)




        <record id="contract_contract_seq" model="ir.sequence">
            <field name="name">Contract Sequence</field>
            <field name="code">contract.contract</field>
            <field name="prefix">CT</field>
            <field name="padding">5</field>
            <field name="company_id" eval="False" />
        </record>






****************************** deafault ************************************
    booking_date = fields.Date('Booking Date', default=lambda self: fields.Date.today())
    default_booking_date = fields.Date(default=lambda self: fields.Date.today() + timedelta(days=7))

    
   +++++++++
   default get
   +++++++++++

    def _get_default_stage(self):
        default_stage_id = self.env['contract.stage'].search([], limit=1)
        return default_stage_id
    stage_id = fields.Many2one('contract.stage', string='Stage',default=_get_default_stage)


****************************** search view **********************************

    <record id="view_account_move_filter" model="ir.ui.view">
            <field name="name">account.move.select</field>
            <field name="model">account.move</field>
            <field name="arch" type="xml">
                <search string="Search Move">
                    <field name="name" string="Journal Entry" filter_domain="['|', '|', ('name', 'ilike', self), ('ref', 'ilike', self), ('partner_id', 'ilike', self)]"/>
                    <field name="date"/>
                    <field name="partner_id"/>
                    <field name="journal_id"/>
                    <filter string="Unposted" name="unposted" domain="[('state', '=', 'draft')]" help="Unposted Journal Entries"/>
                    <filter string="Posted" name="posted" domain="[('state', '=', 'posted')]" help="Posted Journal Entries"/>
                    <separator/>
                    <filter string="Reversed" name="reversed" domain="[('payment_state', '=', 'reversed')]"/>
                    <separator/>
                    <filter string="To Check" name="to_check" domain="[('to_check', '=', True)]"/>
                    <separator/>
                    <filter string="Sales" name="sales" domain="[('journal_id.type', '=', 'sale')]" context="{'default_journal_type': 'sale'}"/>
                    <filter string="Purchases" name="purchases" domain="[('journal_id.type', '=', 'purchase')]" context="{'default_journal_type': 'purchase'}"/>
                    <filter string="Bank" name="bankoperations" domain="[('journal_id.type', '=', 'bank')]" context="{'default_journal_type': 'bank'}"/>
                    <filter string="Cash" name="cashoperations" domain="[('journal_id.type', '=', 'cash')]" context="{'default_journal_type': 'cash'}"/>
                    <filter string="Miscellaneous" name="misc_filter" domain="[('journal_id.type', '=', 'general')]" context="{'default_journal_type': 'general'}"/>
                    <separator/>
                    <filter string="Date" name="date" date="date"/>
                    <separator/>
                    <group expand="0" string="Group By">
                        <filter string="Partner" name="partner" domain="[]" context="{'group_by': 'partner_id'}"/>
                        <filter string="Journal" name="journal" domain="[]" context="{'group_by': 'journal_id'}"/>
                        <filter string="Status" name="status" domain="[]" context="{'group_by': 'state'}"/>
                        <filter string="Date" name="by_date" domain="[]" context="{'group_by': 'date'}" help="Journal Entries by Date"/>
                        <filter string="Company" name="by_company" domain="[]" context="{'group_by': 'company_id'}" groups="base.group_multi_company"/>
                    </group>
                </search>
            </field>
        </record>










******************************** filter one2many field ************************************



    step_ids= fields.One2many('contract.step',inverse_name="contract_id",string="Contract Step",store=True)

    stage_step_ids= fields.One2many('contract.step',inverse_name="contract_id",string="Contract Step",compute="_compute_stage_steps_ids")



    
    @api.depends('step_ids')
    def _compute_stage_steps_ids(self):
        for rec in self:
            rec.stage_step_ids=rec.step_ids.filtered_domain([('stage_id','=',rec.stage_id.id)])
        print("*********************************************************************")

****************************** errors ************************************
 from odoo.exceptions import ValidationError,UserError

            raise UserError('Requests Created Successfully')

                raise ValidationError(_("You can't associate a contract with an active related sale order."))


from odoo.exceptions import UserError
                raise UserError(_("There are multiple active contracts for this sale order."))
****************************** notification ***********************************
                'type': 'warning',
                
                                'type': 'success',
    def showwarning(self):
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'type': 'info',
                                'title':"Success",

                'message': _("Two-factor authentication disabled for the following user(s)"),
                'next': {'type': 'ir.actions.act_window_close'},
            }
        }



******************************* ++++++++++++++++++++++++++++++++ ************************************
html_rp=rp_temp._render_template(rp_temp.body_html,'contract.contract',[53])
rp_temp=self.env['rp.template'].browse(3)
****************************** api.constrains ************************************
from odoo import models, fields, api
from odoo.exceptions import ValidationError

class YourModel(models.Model):
    _name = 'your.model'

    field1 = fields.Char(string='Field 1')
    field2 = fields.Char(string='Field 2')

    @api.constrains('field1', 'field2')
    def _check_at_least_one_field_has_value(self):
        for record in self:
            if not (record.field1 or record.field2):
                raise ValidationError("At least one of Field 1 or Field 2 must have a value.")
****************************** ++++++++++++++++++++++++++++++++ ***********************************

<div class="oe_title">
                        <h1>
                            <field name="name" readonly="1"/>
                        </h1>
                    </div>





******************************* uniqe ************************************

    _sql_constraints = [
        ('Unique_Contract_Partner', 'UNIQUE(contract_id,partner_id)', 'this partner already exists for this contract')
    ]
****************************** on line if ************************************
value_if_true if condition else value_if_false

****************************** ++++++++++++++++++++++++++++++++ ******************************
    @api.depends('stage_step_ids.step_status')
    def _compute_stage_complete(self):
        self.stage_complete=True if len(self.stage_step_ids.filtered_domain([('step_status','!=','accepted')])) == 0 else False


    stage_complete = fields.Boolean('Stage Complete',compute="_compute_stage_complete",default=False)


************************************ ++++++++++++++++++++++++++++++++ ************************************
<?xml version="1.0" encoding="utf-8"?>
<odoo>


    <data>
        <record id="ir_cron_scheduler_recurring_action" model="ir.cron">
            <field name="name">Update Missing Duration</field>
            <field name="model_id" ref="model_contract_contract" />
            <field name="state">code</field>
            <field name="code"> model.comput_stage_missing()</field>

            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="numbercall">-1</field>
            <field name="doall">False</field>
            <field name="nextcall"
                eval="(DateTime.now().replace(hour=22,minute=1,second=0) ).strftime('%Y-%m-%d %H:%M:%S')" />
        </record>


    </data>


</odoo>
****************************** ribbon ************************************
                        <widget name="web_ribbon" title="illegal" bg_color="bg-danger"
                            attrs="{'invisible': [ ('illegal', '=', False)]}" />
                            
                            
                            .bg-primary
.bg-secondary
.bg-success
.bg-danger
.bg-warning
.bg-info
.bg-light
.bg-dark
                            
                            
                            
                            
                                          <widget name="web_ribbon" title="Reversed"
                                bg_color="bg-danger"
                                attrs="{'invisible': [('payment_state', '!=', 'reversed')]}"/>
                         <widget name="web_ribbon" text="Invoicing App Legacy"
                                bg_color="bg-info"
                                attrs="{'invisible': [('payment_state', '!=', 'invoicing_legacy')]}"
                                tooltip="This entry has been generated through the Invoicing app, before installing Accounting. It has been disabled by the 'Invoicing Switch Threshold Date' setting so that it does not impact your accounting."/>

****************************** width 30% **********************************


                       <group style="width:30%">

                       
                            </group>











                    <button name="confirm_payment_plan" type="object" string="Confirm"
                        class="btn-secondary" attrs="{'invisible': [('stage', '!=', 'draft')]}" />
                    <button name="generate_plan_requests" type="object" string="Generate Requests"
                        class="btn-secondary" attrs="{'invisible': [('stage', '!=', 'confirmed')]}" />





in payment plan

    stage = fields.Selection([
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('pending', 'Pending'),
        ('approved', 'Approved'),
    ], string='Stage',default='draft')

    
    type_id = fields.Many2one('multi.approval.type', string='Approve Type', required=True)
    
    
    
    
    
    def confirm_payment_plan(self):
        for rec in self:
            rec.stage='confirmed'


******************************** ++++++++++++++++++++++++++++++++ ************************************

                <xpath
                    expr="//group[1]/field[@name='priceflist' or position() = 1]"
                    position="after">
                   <field name="type_id" />
                </xpath>



****************************** calling a specifc function not tested  super * ***********************************

 
from odoo import models, fields, api

class Base1(models.Model):
    _name = 'your_module.base1'

    def some_method(self):
        print("Base1 method")
        return True

class Base2(models.Model):
    _name = 'your_module.base2'

    def some_method(self):
        print("Base2 method")
        return True

class Derived(models.Model):
    _name = 'your_module.derived'
    _inherit = ['your_module.base1', 'your_module.base2']

    def call_base1_method(self):
        # Call the specific method of Base1 using the class name
        Base1.some_method(self)

****************************** ++++++++++++++++++++++++++++++++ ******************************
            <tree string="Approvals"
                decoration-success="state == 'Approved'"
                decoration-danger="state == 'Refused'"
                decoration-info="state == 'Submitted'"
                decoration-warning="state == 'Cancel'">
                <field name="priority" widget="priority" />
                <field name="code" />
                <field name="name" />
                <field name="user_id" />
                <field name="request_date" />
                <field name="pic_id" />
                <field name="deadline" />
                <field name="state" widget="badge"
                    decoration-success="state == 'Approved'"
                    decoration-danger="state == 'Refused'"
                    decoration-info="state == 'Submitted'"
                    decoration-warning="state == 'Cancel'" />
            </tree>



************************************ window action ************************************


    def create_action(self):
        ActWindow = self.env['ir.actions.act_window']
        view = self.env.ref('mail.email_compose_message_wizard_form')

        for template in self:
            button_name = _('Send Mail (%s)', template.name)
            action = ActWindow.create({ 
                'name': button_name,
                'type': 'ir.actions.act_window',
                'res_model': 'mail.compose.message',
                'context': "{'default_composition_mode': 'mass_mail', 'default_template_id' : %d, 'default_use_template': True}" % (template.id),
                'view_mode': 'form,tree',
                'view_id': view.id,
                'target': 'new',
                'binding_model_id': template.model_id.id,
            })
            template.write({'ref_ir_act_window': action.id})

        return True

****************************** database backup ************************************


https://www.odoo.com/ar/forum/lms-d-1/how-can-i-take-back-of-database-by-terminal-101505


****************************** ++++++++++++++++++++++++++++++++ *****************************
<tree edit="0" create="0">


************************************* Kanban ************************************
  <field name="unit_ids" string="Units"
                                    domain="[('is_real_estate','=', True),('state','=','available')]">

                                    <kanban sample="1">
                                        <field name="id" />
                                        <field name="product_variant_count" />
                                        <field name="currency_id" />
                                        <field name="activity_state" />
                                        <progressbar field="activity_state"
                                            colors="{&quot;planned&quot;: &quot;success&quot;, &quot;today&quot;: &quot;warning&quot;, &quot;overdue&quot;: &quot;danger&quot;}" />
                                        <templates>
                                            <t t-name="kanban-box">
                                                <div
                                                    class="oe_kanban_card oe_kanban_global_click">
                                                    <div class="o_kanban_image mr-1">
                                                        <img
                                                            t-att-src="kanban_image('product.template', 'image_128', record.id.raw_value)"
                                                            alt="Product"
                                                            class="o_image_64_contain" />
                                                    </div>
                                                    <div class="oe_kanban_details">

                                                        <div class="o_kanban_record_top mb-0">
                                                            <div
                                                                class="oe_kanban_top_right">
                                                                <strong
                                                                    class="o_kanban_record_title">
                                                                    <field name="name" />
                                                                </strong>
                                                            </div>
                                                            <div class="oe_kanban_top_left">
                                                                <field name="state"
                                                                    widget="label_selection"
                                                                    options="{'classes': {'registered': 'default', 'available': 'primary','booked': 'warning','contracted':'success','delivered':'success'}}" />
                                                            </div>


                                                        </div>


                                                        <div name="product_lst_price"
                                                            class="mt-1"> Price: <field
                                                                name="list_price"
                                                                widget="monetary"
                                                                options="{'currency_field': 'currency_id', 'field_digits': True}" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </t>
                                        </templates>
                                    </kanban>
****************************** ++++++++++++++++++++++++++++++++ ************************************
//date

end_of_the_day = datetime.combine(rec.day_date, datetime.max.time())


//datetime
            # begin_of_the_day = rec.day_date.replace(hour=0, minute=0, second=0, microsecond=0).strftime('%Y-%m-%d %H:%M:%S')

            # begin_of_the_day = rec.day_date.replace(hour=0, minute=0, second=0, microsecond=0).strftime('%Y-%m-%d %H:%M:%S')










from datetime import datetime, time

date = datetime.now().date()
specific_time= time(hour=16)
datetime_obj = datetime.combine(date, specific_time)
print("Datetime from:", datetime_obj)








****************************** weekday ************************************

import datetime

# Create a datetime object for a specific date
date = datetime.date(2024, 4, 1)
datet = datetime.datetime(2024, 4, 1)

# Get the day of the week (0 = Monday, 1 = Tuesday, ..., 6 = Sunday)
day_of_week = datet.weekday()

print(f"The day of the week for {date} is {day_of_week}.")

****************************** tree view header **********************************
////////// must select records to show


    <record id="stock_valuation_layer_tree_inherit" model="ir.ui.view">
        <field name="name">stock.valuation.layer.tree.inherit</field>
        <field name="model">stock.valuation.layer</field>
        <field name="inherit_id" ref="stock_account.stock_valuation_layer_tree" />
        <field name="arch" type="xml">
            <xpath expr="//tree[1]" position="inside">
                <header>

                    <button string="compensate" name="compensate_selected" type="object"
                        class="oe_highlight" />
                </header>
            </xpath>
        </field>
    </record>


******************************** currency ************************************

    company_id = fields.Many2one(
            'res.company', 'Company',
            default=lambda self: self.env.company, index=1)
    currency_id = fields.Many2one(
            'res.currency', 'Currency',
            default=lambda self: self.env.company.currency_id,
****************************** wizard ************************************


                </sheet>


                <footer>
                    <button name="action_validate_revaluation" string="Revalue" type="object"
                        class="btn-primary" data-hotkey="q" />
                    <button string="Cancel" class="btn-secondary" special="cancel" data-hotkey="z" />
                </footer>
            </form>
        </field>
    </record>
****************************** configuration 17 *********************************




{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Odoo_beta_17",
            "type": "python",
            "request": "launch",
            "program": "/opt/odoo17/odoo17/odoo-bin",
            "python": "/opt/odoo17/beta_17_env/bin/python3",
            // "justMyCode": true,
            "args": [
                "-c",
                "/etc/odoo_17_beta.conf",
                "--dev",
                "all",
                "--log-level=debug",
                "--logfile=",
                "-d",
                "osama",
                "-u",
                "attendance_advanced",
                // "analyze_attendance_by_day,hr_advanced_validation,hr_raw_zte_attendance,attendance_advanced,real_estate_payments_advanced,contract_management,approvals_for_multiple_things,multi_level_approval,real_estate_payments",
                // "contract_management,real_estate_payments,real_estate_payments_advanced,multi_level_approval ,attendance_advanced"
            ],
            "console": "internalConsole",
            "redirectOutput": true,
            "cwd": "${workspaceFolder}",
            "env": {},
            "envFile": "${workspaceFolder}/.env",
        },
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode": true
        }
    ]
}







********************************* ++++++++++++++++++++++++++++++++ ************************************
[options]
addons_path = /opt/odoo17/addons,/opt/odoo17/enterprise_addons,/opt/odoo17/mybroker_addons
admin_passwd = admin
csv_internal_sep = ,
data_dir = /home/shahin/.local/share/Odoo
db_host = False
db_name = 
db_password = False
db_port = False
db_sslmode = prefer
db_template = template0
db_user = False
dbfilter = 
demo = {}
email_from = False
from_filter = False
http_port = 8017
limit_memory_hard = 26843545600000
limit_memory_soft = 21474836480000
limit_request = 655360000
limit_time_cpu = 600000
limit_time_real = 120000
limit_time_real_cron = -1
proxy_mode = False
websocket_keep_alive_timeout = 360000
websocket_rate_limit_burst = 10
websocket_rate_limit_delay = 0.2
without_demo = False
workers = 0
x_sendfile = False




********************************* ++++++++++++++++++++++++++++++++ ************************************

********************************* ++++++++++++++++++++++++++++++++ ************************************

********************************* ++++++++++++++++++++++++++++++++ ************************************

********************************* ++++++++++++++++++++++++++++++++ ************************************

********************************* ++++++++++++++++++++++++++++++++ ************************************

********************************* ++++++++++++++++++++++++++++++++ ************************************



you can make onchange on computed field
****************************** readonly but not for a specific group ************************************




                        <field name="employee_id" readonly="1" />
                        <field name="employee_id"
                            groups="hr_payroll_community.group_hr_payroll_community_user" />
****************************** ++++++++++++++++++++++++++++++++ *******************************

is instant of



 import datetime

            attendance_date= attendance if isinstance(attendance, datetime.date) else attendance.check_in.date()


*********************************** ++++++++++++++++++++++++++++++++ ************************************




            <xpath expr="//button[@name='%(hr_payroll_community.action_hr_payslip_by_employees)d']"
                position="before">
                <button string="Generate Payslips"
                    name="%(action_hr_payslip_by_employees_with_exclusions)d" type="action"
                    class="oe_highlight" />
            </xpath>
            <xpath expr="//button[@name='%(hr_payroll_community.action_hr_payslip_by_employees)d']"
                position="attributes">
                <attribute name="invisible">1</attribute>
            </xpath>





****************************** ++++++++++++++++++++++++++++++++ ******************************


            <xpath expr="//notebook" position="before">











************************************ ++++++++++++++++++++++++++++++++ ************************************


/opt/odoo17/beta_17_env/bin/python3  /opt/odoo17/odoo17/odoo-bin  -c /etc/odoo_17_beta.conf --logfile= -d yousef_test -p 8027
/opt/odoo17/beta_17_env/bin/python3  /opt/odoo17/odoo17/odoo-bin  -c /etc/odoo_17_beta.conf --logfile= -d osama -p 8027
****************************** group appear based on groups ************************************





                <xpath expr="//widget[@name='hr_leave_stats']" position="before">
                    <group string="Appears only to assistants" groups="time_off_assistant.group_hr_holidays_assistant">

                        <field name="employee_id" invisible="holiday_type !=  'employee' or employee_id == False" widget="many2one_avatar_employee" domain="['|',('time_off_assistant_id', '=', uid),('user_id','=',uid)]"  />


                        <field name="employee_ids"  invisible="holiday_type != 'employee' or (state == 'validate' and employee_id)" readonly="state in ['cancel', 'refuse', 'validate', 'validate1']" required="holiday_type == 'employee' and state in ('draft', 'cancel', 'refuse')" widget="many2many_tags_avatar" domain="['|',('time_off_assistant_id', '=', uid),('user_id','=',uid)]"/>
                    </group>

                </xpath>

****************************** ++++++++++++++++++++++++++++++++ *********************************

from jinja2 import Environment
from markupsafe import Markup









********************************* computed domain ************************************
	
	
	new
	
	
	
	<field name="parent_id" domain="[('id', 'in', context.get('task_ids', []))]"/>
	
	
	
	
	
	
	
	
	
	
	
	
	old
	
	
	
	

from odoo import models, fields, api

class YourModelName(models.Model):
    _name = 'your.model.name'

    field_to_compute_domain = fields.Many2one('related.model.name', domain=lambda self: self._compute_field_domain())
    @api.model
    def _compute_field_domain(self):
        context = self.env.context
        # Retrieve the value from the context using context.get()
        some_value_from_context = context.get('some_key', 'default_value_if_not_present')

        # Use the retrieved value in your domain computation logic
        domain = [('some_field', '=', some_value_from_context)]
        return domain

****************************** ++++++++++++++++++++++++++++++++ ************************************


        return {
            'name': _('Add Dependent Membership'),
            'type': 'ir.actions.act_window',
            'view_mode': 'form',
            'context': {'default_cm_contract_id':self.cm_contract_id.id,'default_parent_membership_id':self.id,'dependant_ids':dependant_ids.ids},

            'res_model': 'add.dependant.wizard',
            'target':'new'
        }
****************************** ++++++++++++++++++++++++++++++++ ************************************

    birthdate = fields.Date(string="Birthdate", required=True)
    age_years = fields.Integer(string="Age (Years)", compute="_compute_age")
    age_months = fields.Integer(string="Age (Months)", compute="_compute_age")
    age_days = fields.Integer(string="Age (Days)", compute="_compute_age")

    @api.depends('birthdate')
    def _compute_age(self):
        today = datetime.now().date()
        for record in self:
            birthdate = record.birthdate
            age = relativedelta(today, birthdate)
            record.age_years = age.years
            record.age_months = age.months
            record.age_days = age.days









****************************** get group users ************************************




    def get_all_sales_persons(self):
        group_id = self.env.ref('sales_team.group_sale_salesman').id
        # Retrieve the group record
        users = self.env['res.groups'].browse(group_id).users

****************************** expansion and destruction in python ************************************



https://chat.openai.com/c/677856cf-2ba2-432f-a60e-72278f0a6958






****************************** ++++++++++++++++++++++++++++++++ ***************************


 async onClickDownloadXSD() {
        await this.rpc("/web/dataset/call_kw/ir.attachment/action_download_xsd_files", {
            model: 'ir.attachment',
            method: 'action_download_xsd_files',
            args: [],
            kwargs: {}
        })
    }





*************************************** type ************************************


        if not (isinstance(res_model,int)): res_model=res_model.id
        if not (isinstance(res_id,int)): res_id=res_id.id
****************************** post get ************************************

https://chat.openai.com/share/b6547023-8dcc-4300-a46f-b5e979059a41
****************************** xpath widget *******************************


   <xpath expr="//field[@name='contract_partner_id_or_ids']" position="attributes">
                    <attribute name="widget">many2many_tags</attribute>
                </xpath>*********************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** search view inherit ************************************

 <record id="cm_contract_view_search" model="ir.ui.view">
      <field name="name">cm.contract.view.search</field>
      <field name="model">cm.contract</field>
      <field name="inherit_id" ref="generic_contract.contract_contract_view_search"/>
      <field name="mode">primary</field>

      <field name="arch" type="xml">

        <search string="Contract">

          <field name="dependant_ids"/>


        </search>
        <!-- <xpath expr="//group[@name='group_by']" position="inside">

        </xpath> -->

      </field>
    </record>

****************************** default_get ********************************

class MyModel(models.Model):
    _name = 'my.model'

    def default_get(self, fields_list):
        defaults = super(MyModel, self).default_get(fields_list)
        if 'field1' in fields_list:
            defaults['field1'] = self.env.user.name  # Set default value based on current user
        if 'field2' in fields_list:
            defaults['field2'] = fields.Datetime.now()  # Set default value to current date and time
        return defaults

********************************** ++++++++++++++++++++++++++++++++ ************************************









        allowed_times = self.allowed_model_id.allowed_times.mapped('time')
        if len(allowed_times)>self._max_slots_per_day:
            allowed_times = allowed_times[:self._max_slots_per_day]

****************************** how to reload window from code ************************************

            return {
                'type':'ir.actions.client',
                'tag':'reload'
            }
****************************** send_email to *********************************


  <record id="email_template_unit_booked_email_template" model="mail.template">
            <field name="name">Unit Booked Email Template To All Sales Persons</field>
            <field name="model_id" ref="real_estate_inventory.model_crm_lead" />
            <!-- <field name="email_from">{{ object.partner_id.email}}</field> -->
            <!-- <field name="partner_to">{{ object.partner_id.id }}</field> -->
            <field name="subject">Unit {{ object.proposed_unit.display_name }} is BOOKED </field>
            <field name="description">Sent to all sales persons when unit is booked</field>
            <field name="body_html" type="html">
                <div style="margin: 0; padding: 0; font-family: Arial, sans-serif; font-size: 14px; color: #333;">
                    <p style="margin: 0; padding: 0;">
                Please note that unit
                        <t t-if="object.proposed_unit">
                            <strong>
                                <t t-out="object.proposed_unit.display_name or ''"/>
                            </strong>
                        </t>
                has been booked by
                        <t t-if="object.user_id.name">
                            <strong>
                                <t t-out="object.user_id.name or ''"/>
                            </strong>
                        </t>
                    </p>
                </div>
            </field>
            <field name="lang">{{ object.partner_id.lang }}</field>
            <field name="auto_delete" eval="True" />
        </record>



def send_unit_booked_email_to_sales_persons(self):
        # x=self.get_all_sales_persons().ids
        email_to = ','.join(self.get_emails_of_all_sales_persons())

        template_id = self.env.ref('real_estate_inventory.email_template_unit_booked_email_template')
        email_values={"email_to":email_to}
        mail_id=template_id.send_mail(self.id,email_values=email_values)
        self.env['mail.mail'].browse(mail_id).send()










********************************* ++++++++++++++++++++++++++++++++ ************************************









from odoo import _, api, fields, models

from ast import literal_eval
def check_if_the_product_exists(product,list_of_dics):
    for dic in list_of_dics:
        
        if product.id ==  dic['product_id']:
            return True
    return False


class PurchaseOrderInherit(models.Model):
    _inherit = 'purchase.order'
    _description = 'Purchase Order Inherit'


    po_revaluation_review_ids = fields.One2many('in.rv.po.revaluation.review', 'po_id', string='Reviews')

    # po_valuation_count = fields.Integer("Incoming Shipment count", compute='_compute_incoming_picking_count')

    @api.depends('picking_ids')
    def _compute_incoming_picking_count(self):
        for order in self:
            order.incoming_picking_count = len(order.picking_ids)




    def action_view_po_valuation_layers(self):


        pickings=self.env['stock.move']
        total_scraps=self.env['stock.scrap']
        compensations_ids=self.env['stock.valuation.layer'].search([('po_id','=',self.id)])
        
        for picking in self.picking_ids:
            pickings = pickings + picking.move_lines
            scraps=self.env['stock.scrap'].search([('picking_id', '=', picking.id)])
            total_scraps = total_scraps + scraps
        



        domain = [('id', 'in', (pickings + total_scraps.move_id).stock_valuation_layer_ids.ids+compensations_ids.ids)]
        action = self.env["ir.actions.actions"]._for_xml_id("stock_account.stock_valuation_layer_action")
        context = literal_eval(action['context'])
        context.update(self.env.context)
        context['no_at_date'] = True
        return dict(action, domain=domain, context=context)
    

    def get_po_valuations(self):
        pickings=self.env['stock.move']
        compensations_ids=self.env['stock.valuation.layer'].search([('po_id','=',self.id)])
        
        for picking in self.picking_ids:
            pickings = pickings + picking.move_lines

        return pickings.stock_valuation_layer_ids + compensations_ids

    


    def get_avg_price_of_lines(self,lines):
        total_quantity=0
        total_price=0
        for line in lines:
            total_price= total_price + line['qty_received'] * line['price_unit']
            total_quantity=total_quantity + line['qty_received']
        if total_price and total_quantity:
            return total_price, total_quantity, total_price/total_quantity
        return total_price, total_quantity, 0



    
    def merge_product_lines_from_order_line(self):
        merged_product_lines=[]
        po_valuations=self.get_po_valuations()
        for line in self.order_line:
            if not(check_if_the_product_exists(line.product_id,merged_product_lines)):
                product_lines=self.order_line.filtered_domain([('product_id','=',line.product_id.id)])
                product_valuations=po_valuations.filtered_domain([('product_id','=',line.product_id.id)])
                total_price, total_quantity, avg_price=self.get_avg_price_of_lines(product_lines)
                total_product_qty=sum(product_lines.mapped('product_qty'))
                total_qty_received=sum(product_lines.mapped('qty_received'))
                total_qty_invoiced=sum(product_lines.mapped('qty_invoiced'))
                svl_total_quantity=sum(product_valuations.mapped('quantity'))
                svl_total_value=sum(product_valuations.mapped('value'))
                merged_product_lines.append({'po_id':self.id,'product_id':line.product_id.id,'total_product_qty':total_product_qty,'total_qty_received':total_qty_received,'total_qty_invoiced':total_qty_invoiced,'total_quantity':total_quantity,'total_price':total_price,'svl_total_quantity':svl_total_quantity,'svl_total_value':svl_total_value})
        return merged_product_lines

    def action_correct_inventory_valuation(self):
        self.env['in.rv.po.revaluation.review'].search([('po_id','=',self.id)]).unlink()
        merged_product_lines=self.merge_product_lines_from_order_line()
        self.env['in.rv.po.revaluation.review'].create(merged_product_lines)

        return {
            'name': _('Revaluation'),
            'type': 'ir.actions.act_window',
            'view_mode': 'form',
            'res_model': 'in.rv.po.revaluation',
            'context': {'default_po_id':self.id},            # 'domain': [('id', 'in', quotations)],
            'target':'new'
        }














****************************** one2many field write ************************************
    def post_review_additional_fees(self,review):
        create_dict={"move_id":self.invoice_id.id,"name":f"Addtional Fees of {review.invoice_line_id.name}","account_id":review.invoice_line_id.account_id.id,"analytic_account_id":review.invoice_line_id.analytic_account_id.id,"tax_ids":review.invoice_line_id.tax_ids.ids,"quantity":review.invoice_line_id.quantity,'price_unit':review.unit_added_value}
        self.invoice_id.with_context(check_move_validity=False).write({'invoice_line_ids':[[0,0,create_dict]]})

****************************** add button in tree view header ***********************************

 <record id="cm_membership_view_tree" model="ir.ui.view">
            <field name="name">cm.membership.view.tree</field>
            <field name="model">cm.membership</field>
            <field name="arch" type="xml">
                <tree string="Membership" decoration-success="membership_status == 'active'" decoration-info="membership_status == 'pending'" decoration-warning=" is_suspended == True">
                    <header>
                        <button string="Activate" name="action_activate_membership" type="object" class="bg-success" attrs="{'invisible': [ '|',('membership_status', 'not in', ('pending')),('is_suspended', '=', True)]}"/>
                    </header>
                    <field name="code" />
                    <field name="is_suspended" invisible="1" />
                    <field name="active" invisible="1" />
                    <field name="membership_type" />
                    <field name="dependant_type" />
                    <!-- <field name="separation_required" />
                    <field name="separation_warning" /> -->

                    <field name="partner_id" />
                    <field name="cm_contract_id" />
                    <field name="parent_membership_id" />
                    <field name="membership_status" widget="badge" decoration-success="membership_status == 'active'" decoration-info="membership_status == 'pending'" decoration-warning=" is_suspended == True"/>
                    <button string="Activate" name="action_activate_membership" type="object" class="bg-success" attrs="{'invisible': [ '|',('membership_status', 'not in', ('pending')),('is_suspended', '=', True)]}"/>
                    <!-- <button string="Suspend Membership" name="action_open_membership_suspension_wizard" type="object" class="bg-warning" /> -->

                    <!-- <field name="membership_type" /> -->
                </tree>
            </field>
        </record>



******************************* ++++++++++++++++++++++++++++++++ ************************************

# -*- coding: utf-8 -*-


{
    'name': 'OCA Bank Reconcilation Cosmatics',
    'version': '17.0.1.0.0',

    'description': 'Hide Any Menu Item User Wise, Hide Menu Items, Hide Menu',
    'category': 'Extra Tools',
    'author': 'Cybrosys Techno Solutions',
    'company': 'Cybrosys Techno Solutions',
    'maintainer': 'Cybrosys Techno Solutions',
    'website': "https://www.cybrosys.com",
    'depends': ['base'],
    'data': [
        'views/res_users.xml',
        'security/security.xml'
    ],
    'license': 'LGPL-3',
    'images': ['static/description/banner.png'],
    'installable': True,
    'auto_install': False,
    'application': False,
}







****************************** ++++++++++++++++++++++++++++++++ ************************************






{
    'name': 'Payroll Advanced attendance calculation',
    'version': '1.0',
    'depends': ['hr_attendance',"hr_payroll_community",'hr_holidays','hr_raw_zte_attendance'],
    'author': 'Metrics',
    'category': 'Uncategorized',

    'description': '''
    Integrating hr attendance with payroll to calculate:
    - missing check in/check out
    - late check in / checkout 
    - early check in / checkout
    - matching this with expected working days and hours
    ''',
    # data files always loaded at installation
    'data': [
        'security/ir.model.access.csv',
        'views/payslip.xml',
        'views/aa_payslip_exclusion_views.xml',
        'views/absent.xml',
    ],
    # data files containing optionally loaded demonstration data
    'demo': [
  
    ],
}


****************************** ++++++++++++++++++++++++++++++++ ***********************************

        if vals.get('user_id',False):self.create_sales_person_activity()




******************************* no_create / no_create and edit ************************************



                            <field name="spouse_id" attrs="{'invisible': [('dependant_type', '=', 'child')],'required':[('dependant_type', '=', 'spouse')]}" options="{'no_create': True, 'no_create_edit':True}" />

****************************** ++++++++++++++++++++++++++++++++ ************************************


    main_contract_partner = fields.Many2one('contract.partner', string='Main Partner',compute="_compute_main_partner",store=True)

    @api.depends('contract_partner_id_or_ids')
    def _compute_main_partner(self):
        for rec in self:
            if rec.contract_partner_id_or_ids:
                rec.main_contract_partner=rec.contract_partner_id_or_ids[0].id
            else:
                rec.main_contract_partner=False
****************************** ++++++++++++++++++++++++++++++++ ******************************

self.env["mail.activity"]
            .sudo()
            .create(
                {
                    "activity_type_id": self.activity3.id,
                    "note": "Partner activity 3.",
                    "res_id": self.partner_client.id,
                    "res_model_id": partner_model_id,
                    "user_id": self.employee.id,
                }
            )
        )




************************************ ++++++++++++++++++++++++++++++++ ************************************


    # probability_as_percentage = fields.Float('Probability')
    # probability_value = fields.Float(compute='_compute_probability_value', string='Probability Value')
    
    # @api.depends('probability_as_percentage')
    # def _compute_probability_value(self):
    #     for rec in self:
    #         rec.probability_value = rec.probability_as_percentage/100
****************************** add create and delete and update using numbers  ************************************





https://www.cybrosys.com/blog/what-are-the-special-command-operation-for-one2many-and-many2many-fields

https://www.cybrosys.com/blog/how-to-pass-values-to-the-child-lines-of-one2many-fields 


(6, 0, [IDs]) replace the list of linked IDs.

Example:

[(6, 0, [8, 5, 6, 4])] sets the many2many to ids [8, 5, 6, 4]
Here are other codes:

(0, 0,  { values })    link to a new record that needs to be created with the given values dictionary
(1, ID, { values })    update the linked record with id = ID (write *values* on it)
(2, ID)                remove and delete the linked record with id = ID (calls unlink on ID, that will delete the object completely, and the link to it as well)
(3, ID)                cut the link to the linked record with id = ID (delete the relationship between the two objects but does not delete the target object itself)
(4, ID)                link to existing record with id = ID (adds a relationship)
(5)                    unlink all (like using (3,ID) for all linked records)
(6, 0, [IDs])          replace the list of linked IDs (like using (5) then (4,ID) for each ID in the list of IDs)
****************************** create invoice from code ********************************




    def create_request_invoice(self):
        invoice = self.env['account.move'].create({
            'move_type': 'out_invoice',
            'partner_id': self.customer_id.id,
            'partner_shipping_id': self.customer_id.id,
            'booking_request_id': self.id,
            'invoice_date': datetime.now(),
            'invoice_line_ids': [(0, 0, {
                                        'product_id': self.unit_id.product_variant_id.id,
                                        'price_unit': 54545,
                                        })] ,
              })








165a6aeea9cee302d504030f504def773621b9aa



********************************** ref in view / invisible using ref ************************************



                <button name="action_book_unit" string="Booked" type="object" invisible="stage_id == %(stage_booked)d or is_won == True" />

****************************** ++++++++++++++++++++++++++++++++ ************************************




  <!-- dddddddddddddddddddddddddddddddd -->


            <xpath expr="//button[@name='action_configure_bank_journal']" position="replace">
                <button name="%(account_reconcile_oca.action_bank_statement_line_reconcile_all)s" type="action" class="btn btn-primary" groups="account.group_account_invoice">New Transaction</button>

            </xpath>


            <xpath expr="//t[@t-name='JournalBodyBankCash']//a[@name='action_new_transaction']" position="replace">

                <a role="menuitem" type="object" name="open_action_with_context" context="{'action_name': 'action_bank_statement_tree', 'search_default_journal': True}">Statements</a>
            </xpath>
            <xpath expr="//t[@t-name='kanban-menu']//a[@name='action_new_transaction']" position="replace">
                <a role="menuitem" type="action" name="%(account_reconcile_oca.action_bank_statement_line_reconcile_all)s">New Transaction</a>
            </xpath>
            <!-- ddddddddddddd -->





****************************** ++++++++++++++++++++++++++++++++ ******************************



# -*- coding: utf-8 -*-
{
    'name': 'OCA Bank Reconcilation Cosmatics',

    'description': """
This module adds missing menus and view for OCA Bank Reconcilation Module and fix existing ones    """,

    'author': "Metrics",
    'website': "https://www.metrics.com.eg/",


    'category': 'Uncategorized',
    'version': '17.0.1.0.0',
    # any module necessary for this one to work correctly
    'depends': ['account'],

    # always loaded
    'data': [
        'views/account_journal_dashboard_kanban_view.xml',
    ],
    # only loaded in demonstration mode
    'demo': [
        # 'demo/demo.xml',
    ],
}






************************************ ++++++++++++++++++++++++++++++++ ************************************






	
            <!-- checking for duplicate leads  -->
            <!-- <xpath expr="//group[@name='opportunity_partner']" position="inside">
                <field name="partner_id" />

                <field name="contact_name"/>
                <field name="partner_name"/>
                <field name="phone"/>
                <field name="mobile"/>
                <field name="email_from"/>

                <field name="function"/>
            </xpath> -->





****************************** ++++++++++++++++++++++++++++++++ ************************************









<group string="Tracking" name="categorization">
                        <group string="budget" name="tracking_budget">
                            <field name="budget_min" widget="monetary" field_id="budget_min_0"/>
                            <field name="budget_max" widget="monetary" field_id="budget_max_0"/>
                        </group>

                        <group string="Area" name="tracking_rea">
                            <field name="area_min" field_id="area_min_0"/>
                            <field name="area_max" field_id="area_max_0"/>
                        </group>
                        <group string="Proposed unit" name="tracking_proposed_unit">
                            <field name="proposed_unit" on_change="1" can_create="True" can_write="True" field_id="proposed_unit_1"/>
                        </group>
                        <group string="Location" name="tracking_location">
                            <field name="locations_preferred" widget="many2many_tags" options="{'color_field': 'color', 'no_create_edit': True}" can_create="True" can_write="True" field_id="locations_preferred_0"/>
                            <field name="projects_preferred" widget="many2many_tags" options="{'color_field': 'color', 'no_create_edit': True}" can_create="True" can_write="True" field_id="projects_preferred_0"/>
                        </group>
                        <group name="tracking_marketing" string="Marketing">
                            <field name="broker_id" can_create="True" can_write="True" field_id="broker_id_0"/>
                <field name="broker_agent_name" field_id="broker_agent_name_0"/>
                <field name="broker_agent_phone" widget="phone" field_id="broker_agent_phone_0"/>
                            <field name="campaign_id" can_create="True" can_write="True" field_id="campaign_id_0"/>
                            <field name="medium_id" can_create="True" can_write="True" field_id="medium_id_0"/>
                            <field name="source_id" can_create="True" can_write="True" field_id="source_id_0"/>
                            <field name="referred" field_id="referred_0"/>
                            <field name="self_generated" invisible="1" field_id="self_generated_0"/>
                        </group>

                    </group>
                    <group string="Analysis">
                        <field name="date_open" on_change="1" field_id="date_open_0"/>
                        <field name="date_closed" on_change="1" field_id="date_closed_0"/>
                    </group>
                </page>
                            <page string="Internal Notes" name="internal_notes">
                                <field name="description" placeholder="Add a description..." options="{'collaborative': true}" field_id="description_0"/>
                            </page>
                            <page name="extra" string="Extra Info" invisible="type == 'opportunity'">
                                <group>
                                    <group string="Email">
                                        <field name="message_bounce" readonly="1" field_id="message_bounce_0"/>
                                    </group>
                                    <group string="Marketing" name="categorization">
                                        <field name="campaign_id" options="{'create_name_field': 'title'}" can_create="True" can_write="True" field_id="campaign_id_1"/>
                                        <field name="medium_id" can_create="True" can_write="True" field_id="medium_id_1"/>
                                        <field name="source_id" can_create="True" can_write="True" field_id="source_id_1"/>
                                        <field name="referred" field_id="referred_1"/>
                                    </group>
                                    <group string="Analysis">
                                        <field name="date_open" on_change="1" field_id="date_open_1"/>
                                        <field name="date_closed" on_change="1" field_id="date_closed_1"/>
                                    </group>
                                </group>




****************************** ++++++++++++++++++++++++++++++++ ************************************
    <record id="crm_all_leads_action" model="ir.actions.act_window">
        <field name="name">All Leads</field>
        <field name="res_model">crm.lead</field>
        <field name="view_mode">tree,kanban,graph,pivot,calendar,form,activity</field>
        <field name="domain">['|',("active","=",True),("active","=",False)]</field>
        <field name="view_ids" eval="[Command.clear(),
     Command.create({'sequence': '1', 'view_mode': 'form', 'view_id': ref('real_estate_inventory.crm_sales_person_lead_view_form_inheritt' )}),
    Command.create({'sequence': '0', 'view_mode': 'tree', 'view_id': ref('crm.crm_lead_view_list_activities' )})]" />

        <field name="search_view_id" ref="crm.view_crm_case_leads_filter"/>
        <field name="context">{}</field>

    </record>









****************************** this weeks leads  ************************************


<filter string="Creation Date" name="creation_date" date="create_date"/>
                
                
                
                
                
                
                
                
                
                
                
                

****************************** search view inheritance ************************************



 <record id="crm_activity_report_view_search_inherit" model="ir.ui.view">
        <field name="name">crm.activity.report.view.search.inherit</field>
        <field name="model">crm.activity.report</field>
        <field name="inherit_id" ref="crm.crm_activity_report_view_search"/>
        <field name="arch" type="xml">
            <search>
                <field name="date"/>
            </search>

            <xpath expr="//filter[1]" position="before">
                <filter name="today_activities" string="Today Activities" domain="[('date', '&gt;=', (datetime.datetime.now() - datetime.timedelta(days=1)).strftime('%Y-%m-%d 00:00:00')), ('date', '&lt;=', (datetime.datetime.now()).strftime('%Y-%m-%d 23:59:59'))]" />
                <filter name="this_week_activities" string="This Week Activities" domain="[('date', '&gt;=',(datetime.datetime.now() + relativedelta( days=-7,weekday=5)).strftime('%Y-%m-%d 00:00:00'))]" />
            </xpath>

        </field>
    </record>

****************************** add setting to module ********************************
           <block title="Attendance Compensation">
                        <h2>Attendance Compensation</h2>
                        <setting company_dependent="1" string="Attendance Compensation Leave Type"
                            help="This is leave type of compensation holiday">
                            <field name="compensation_holiday_status_id"
                                placeholder="leave type of compensation holiday" />
                        </setting>
                    </block>


==================================      xml    ===================================



<?xml version="1.0" encoding="utf-8"?>
<odoo>

    <data>


        <record id="res_config_settings_view_form_inherit" model="ir.ui.view">
            <field name="name">res.config.secccccccttings.view.form.inherit</field>
            <field name="model">res.config.settings</field>
            <field name="inherit_id" ref="base.res_config_settings_view_form"/>
            <field name="arch" type="xml">
                <xpath expr="//form" position="inside">

                    <app data-string="Real estate Inventory" string="Real estate Inventory" name="real_estate_inventory">

                        <block title="Accounting">

                            <setting company_dependent="1" string="Booking Payment Journal" help="Payment method allowed for expenses paid by company.">
                                <field name="booking_request_payment_journal_id" placeholder="All payment methods allowed" />
                            </setting>
                            <setting company_dependent="1" string="Booking Payment Method" help="Payment method allowed for expenses paid by company.">
                                <field name="booking_request_payment_method_id" placeholder="All payment methods allowed" />
                            </setting>
                        </block>



                    </app>
                </xpath>
            </field>
        </record>



    </data>


</odoo>







==================================      py    ===================================


from odoo import fields, models






class ResConfigSettings(models.TransientModel):
    _inherit = 'res.config.settings'


    booking_request_invoicing_product_id=fields.Many2one('product.template',string="Booking Request Invoicing Product", config_parameter='booking_request_invoicing.booking_request_invoicing_product_id_param', help='This is the product that is add to the invoice when you create booking request invoice')


        unit_change_approval_type_id = self.env['ir.config_parameter'].get_param('contract_management.unit_change_approval_type_id')





********************************** line_ids ************************************




        vals = {
            'move_type': inv_type,
            'partner_id': self.partner_a.id,
            'invoice_line_ids': [(0, 0, {
                'name': 'xxxx',
                'quantity': 1,
                'price_unit': amount,
                'tax_ids': [(6, 0, taxes.ids)],
            }) for amount, taxes in taxes_per_line],
****************************** ++++++++++++++++++++++++++++++++ ************************************
add to bank_statment_cosmatics account_reconcile_oca

 <field name="name">Reconcile bank statement lines</field>
        <field name="res_model">account.bank.statement.line</field>
        <field name="context">{'search_default_move_id': active_id}</field>
        <field name="view_mode">kanban</field>
        <field
            name="view_ids"
****************************** ++++++++++++++++++++++++++++++++ *********************************

               You might want to set the invoice as <button
                                        name="button_manual_reference_full_paid"
                                        type="object"
                                        method_args="[1]"
                                        
                                    >fully paid</button>.






********************************* ++++++++++++++++++++++++++++++++ ************************************



            if rec.state != 'available': booked_units.append(rec.default_code)

****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************


            <xpath expr="//notebook/page[1]" position="before">
                <page name="units_to_book" string="Units To Book">
                    <field name="unit_expected_revenue_ids" />
                </page>
            </xpath>














****************************** ++++++++++++++++++++++++++++++++ ************************************




# -*- coding: utf-8 -*-
{
    'name': "Booking Request Invoicing",
    'summary': "Allows user to create a reservation invoice from the booking request",
    'description': """
Allows user to create a reservation invoice from the booking request.
    """,
    'author': "Metrics",
    'website': "https://www.metrics.com.eg/",
    'category': 'Invoicing',
    'version': '17.0.1.0.0',

    # any module necessary for this one to work correctly
    'depends': ['real_estate_inventory','sale'],

    # always loaded
    'data': [
        # 'security/ir.model.access.csv',
        'views/lead_booking_request_inherit_views.xml',
        'views/res_config_settings_inherit.xml',
    ],
  
    'demo': [
        # 'demo/demo.xml',
    ],
        'installable': True,
    'application': True,
}

****************************** show archived records in one2many fields ************************************
    archived_plan_structure_approval_ids = fields.One2many(comodel_name='fa.multi_approval',inverse_name= 'plan_structure_id', string='Archived Approvals',compute="_compute_archived_plan_structure_approval_ids",context={'active_test':False,})

****************************** settings menu *************************************



<menuitem id="contract_menu" name="Contracts Configuration" parent="base.menu_custom" sequence="10"/>




        <!-- reporting menu -->

        <menuitem id="contract_reporting_menu" name="Reporting" parent="contract_menu" sequence="10"/>







***************************** ++++++++++++++++++++++++++++++++ ************************************


                    <field name="partner_ids" readonly="stage_id == %(stage_booked)d">

****************************** no label odoo 17 ************************************





                            <field name="unit_expected_revenue_ids" readonly="stage_id == %(stage_booked)d or is_won == True" nolabel="1" colspan="2"/>

****************************** ++++++++++++++++++++++++++++++++ **********************************

<xpath expr="//field[@name='partner_id']" position="attributes">
    <attribute name="readonly">stage_id == %(stage_booked)d or is_won == True</attribute>
</xpath>





******************************** ++++++++++++++++++++++++++++++++ ************************************

    def update_owners_when_customer_change(self,values):
        x=self.env.ref('real_estate_inventory.stage_booked')
        if self.stage_id.id != self.env.ref('real_estate_inventory.stage_booked').id and not(self.is_won) and 'owner_ids' not in values.keys():
            
            if values.get('partner_id',False) and values['partner_id'] not in self.owner_ids.ids:
                self.owner_ids = self.owner_ids + self.env['res.partner'].browse(values['partner_id'])
            else:
                self.owner_ids = self.owner_ids + self.partner_id






****************************** ++++++++++++++++++++++++++++++++ ************************************






http_interface =
http_port = 8017
import_partial =
limit_memory_hard = 268435456000
limit_memory_soft = 214748364800
limit_request = 655360000
limit_time_cpu = 6000
limit_time_real = 120000
limit_time_real_cron = -1
list_db = True
log_db = False
log_db_level = warning
log_handler = :INFO
log_level = debug
logfile =
max_cron_threads = 2
osv_memory_count_limit = 0
pg_path =
pidfile =

****************************** ++++++++++++++++++++++++++++++++ **********************************

get_employee_work_entries_dates



like','WORK100'



    def get_employee_work_entries_date_time(self, date_from, date_to):
        work_entries = self.env['hr.work.entry'].search([('employee_id','=',self.id),('date_start','>=',date_from),('date_stop','<=',date_to)])
        attendance_work_entries = work_entries.filtered_domain([('work_entry_type_id.code','ilike','WORK')])
        return attendance_work_entries



******************************** ++++++++++++++++++++++++++++++++ ************************************






    def regenerate_work_entries(self):
        self.ensure_one()
        if not self.env.context.get('work_entry_skip_validation'):
            if not self.valid:
                raise ValidationError(_("In order to regenerate the work entries, you need to provide the wizard with an employee_id, a date_from and a date_to. In addition to that, the time interval defined by date_from and date_to must not contain any validated work entries."))

            if self.date_from < self.earliest_available_date or self.date_to > self.latest_available_date:
                raise ValidationError(_("The from date must be >= '%(earliest_available_date)s' and the to date must be <= '%(latest_available_date)s', which correspond to the generated work entries time interval.", earliest_available_date=self._date_to_string(self.earliest_available_date), latest_available_date=self._date_to_string(self.latest_available_date)))

        date_from = max(self.date_from, self.earliest_available_date) if self.earliest_available_date else self.date_from
        date_to = min(self.date_to, self.latest_available_date) if self.latest_available_date else self.date_to
        work_entries = self.env['hr.work.entry'].search([
            ('employee_id', 'in', self.employee_ids.ids),
            ('date_stop', '>=', date_from),
            ('date_start', '<=', date_to),
            ('state', '!=', 'validated')])

        write_vals = {field: False for field in self._work_entry_fields_to_nullify()}
        work_entries.write(write_vals)
        self.employee_ids.generate_work_entries(date_from, date_to, True)

****************************** ++++++++++++++++++++++++++++++++ ************************************


    async onClick() {
        if (!this.props.readonly && this.props.record.isInEdition) {
            const changes = { [this.props.name]: !this.props.record.data[this.props.name] };
            await this.props.record.update(changes, { save: this.props.autosave });
        }
    }
}








    triggerIsDirty(isDirty) {
        this.props.record.model.bus.trigger(
            "FIELD_IS_DIRTY",
            isDirty ?? !areDatesEqual(this.getRecordValue(), this.state.value)
        );
    }

    //-------------------------------------------------------------------------
    // Handlers
    //-------------------------------------------------------------------------

    onInput() {
        this.triggerIsDirty(true);
    }
}

****************************** action from python ***********************************

            def _onchange(self):
                automation_rule = self.env['base.automation'].browse(automation_rule_id)
                result = {}
                actions = automation_rule.sudo().action_server_ids.with_context(
                    active_model=self._name,
                    active_id=self._origin.id,
                    active_ids=self._origin.ids,
                    onchange_self=self,
                )
                for action in actions:
                    try:
                        res = action.run()
                    except Exception as e:
                        automation_rule._add_postmortem(e)
                        raise












******************************* ++++++++++++++++++++++++++++++++ ************************************






165a6aeea9cee302d504030f504def773621b9aa



****************************** ++++++++++++++++++++++++++++++++ ************************************




 <xpath expr="//group" position="before">
                    <!-- <group name="cust_info">
                    </group>
                    <br/> -->
                    <group name="customer_info_1" string="Customer Info">

                        <group name="customer_info_1_1">
                            <field name="partner_id" readonly="stage_id == %(real_estate_inventory.stage_booked)d or is_won == True"/>
                            <field name="function"/>
                            <field name="salesperson_domain" invisible="1" />
                            <field name="user_id" required="1" options="{'no_open': True, 'no_create': True}" domain="[('id','in',salesperson_domain)]" />
                        </group>



                        <group name="customer_info_1_2">
                            <field name="phone" widget="international_phone_widget"/>
                            <field name="mobile" widget="international_phone_widget"/>
                            <field name="email_from"/>
                        </group>
                    </group>

                    <group string="Tracking" name="categorization">
                        <group string="budget" name="tracking_budget">
                            <field name="budget_min" widget="monetary" />
                            <field name="budget_max" widget="monetary" />
                        </group>

                        <group string="Area" name="tracking_rea">
                            <field name="area_min" />
                            <field name="area_max" />
                        </group>


                    </group>
                    <group name="tracking_marketing" string="Marketing">
                        <group name="marketing_1">

                            <field name="broker_id" />
                            <field name="broker_agent_name" />
                            <field name="broker_agent_phone" widget="phone" />
                            <field name="campaign_id" />
                        </group>
                        <group name="marketing_2">
                            <field name="medium_id" />
                            <field name="source_id" />
                            <field name="reactivation_source_id" />
                            <field name="referred" />
                            <field name="self_generated" invisible="1" />
                        </group>
                    </group>
                    <group name="location_and_ananlysis">

                        <group string="Location" name="tracking_location">
                            <field name="locations_preferred" widget="many2many_tags" options="{'color_field': 'color', 'no_create_edit': True}" />
                            <field name="projects_preferred" widget="many2many_tags" options="{'color_field': 'color', 'no_create_edit': True}" />
                        </group>


                        <group string="Analysis">
                            <field name="date_open" />
                            <field name="activity_date_deadline" />
                            <field name="date_closed" />
                            <field name="create_date" />
                        </group>
                    </group>


                </xpath>
                <xpath expr="//page[@name='source']" position="attributes">
                    <attribute name="invisible">True</attribute>
                </xpath>














****************************** update xml record using xml_id***********************************



<record id="real_estate_crm.lead_sales_person_onchange" model="base.automation">
<field name="filter_domain" >[('cil_id', '=', False)]</field>
    </record>










******************************* redirect ************************************



            if lead: 
                    action = self.env.ref('crm.crm_lead_action_pipeline').read()[0]
                    action['views'] = [(self.env.ref('crm.crm_lead_view_form').id, 'form')]
                    action['res_id'] = lead.id
                    action['view_type'] = 'form'
                    action['target'] = 'new'
                    raise RedirectWarning(f'The Number {number} Already Used in lead {lead.name} and phone {lead.phone}', action, ('Open lead'),{'name':'test','title':'test'})
                # raise ValidationError(f'The Number {number} Already Used in lead {lead.name} and phone {lead.phone}')





****************************** ++++++++++++++++++++++++++++++++ ************************************
<!-- <templates xml:space="preserve">
    <t t-name="international_phone_widget.widget_template" owl="1">

        <div class="row">
            <div >
                <input class="form-control o_input" type="tel" t-ref="phone" t-on-keyup="on_key_up_phone_input" t-attf-class="{{ state.phoneValid !== undefined  ? ( state.phoneValid ? '': 'o_field_invalid') : '' }}" />
                <i t-attf-class="{{ state.phoneValid !== undefined  ? ( state.phoneValid ? 'fa fa-check text-success': '') : '' }}"/>


                
                <a t-if="props.record.data[props.name]" t-att-href="phoneHref" class="o_phone_form_link ms-3 d-inline-flex align-items-center">
                    <i class="fa fa-phone"></i>
                    <!-- <small class="fw-bold ms-1">Call</small> -->
                </a>
                <a t-if="props.record.data[props.name]" t-att-href="whatsappHref" class="o_phone_form_link ms-3 d-inline-flex align-items-center">
                    <i class="fa fa-whatsapp"></i>
                </a>
                <a t-if="props.record.data[props.name]" t-att-href="truecallerHref" class="o_phone_form_link ms-3 d-inline-flex align-items-center">
                    <i class="fa fa-search"></i>
                </a>



            </div>

            <div >
                <input class="form-control" t-att-id="props.id" t-ref="international_phone" t-att-value="state.international_phone" style="display:none;" readonly="1" required="1" />
            </div>
        </div>
    </t>
</templates> -->







****************************** ++++++++++++++++++++++++++++++++ **********************************

                            <field name="is_draft_stage" invisible="is_last_stage == True"/>


            not_accepted_approvals = self.current_stage_approval_ids.filtered_domain([("state",'!=','Approved')]).mapped('code')







******************************** /* ************************************

 'assets': {
        'web.assets_backend': [
            'international_phone_widget/static/src/components/*/*.js',
            'international_phone_widget/static/src/components/*/*.xml',
            'international_phone_widget/static/src/components/*/*.scss',
        ],
    },
****************************** ++++++++++++++++++++++++++++++++ ************************************

.o-mail-Message-body {
  direction: rtl;
}







****************************** ++++++++++++++++++++++++++++++++ ************************************




****************************** hierachical panel ************************************
hierachy
    _parent_store = True
    _parent_name = "parent_category_id"
    parent_path=fields.Char('parent path',index=True)

****************************** create activity / notified user ************************************
    notified_user_ids= fields.Many2many('res.users',string="Notified Users")

    activity_type_id= fields.Many2one('mail.activity.type',string="Activity Type")
    activity_summary= fields.Char(string="Activity Summary")
    
    
    @api.constrains('notified_user_ids')
    def _check_email_required(self):
        for record in self:
            for user in record.notified_user_ids:
                if not user.partner_id.email:
                    raise ValidationError(f"User {user.partner_id.name} must have an email address.")
                    
                    
                    
                    
                    
                    

    def notify_notified_users(self):
        if len(self.stage_id.notified_user_ids)>0 and len(self.stage_id.activity_type_id)>0:
            for user in self.stage_id.notified_user_ids:
                self.env["mail.activity"].create(
                        {
                            "activity_type_id": self.stage_id.activity_type_id.id,
                            "summary":self.stage_id.activity_summary if self.stage_id.activity_summary else f"{self.contract_code} is now in stage '{self.stage_id.name}'",
                            "res_id": self.id,
                            "res_model_id": self.env['ir.model'].search([('name','=',self._name)],limit=1).id,
                            "user_id": user.id,
                        }
                    )
                    









****************************** send email ************************************


    def send_contract_stage_has_changed_email(self):
        if len(self.stage_id.notified_user_ids)>0:
            for user in self.stage_id.notified_user_ids:
                email_to = user.partner_id.email
                template_id = self.env.ref('contract_management.email_template_contract_stage_changed_for_notified_user_email_template')
                email_values={"email_to":email_to}
                mail_id=template_id.send_mail(self.id,email_values=email_values)
                self.env['mail.mail'].browse(mail_id).send()








****************************** expiry date ************************************




  @api.depends('last_renew_date')
    def _comput_expiry_date(self):
        cil_config=self.env['cil.config'].search([],limit=1)
        if len(cil_config) < 0 : raise ValidationError("Please Add At least on cil configuration")
        cil_validity_period=self.env['cil.config'].search([],limit=1).cil_validity_period
        if not cil_validity_period: raise ValidationError("CIL validity period is not set")
        for rec in self:
            if rec.last_renew_date:
                rec.expiry_date =  rec.last_renew_date + timedelta(days=cil_validity_period)
            elif rec.create_date:
                rec.expiry_date =  rec.create_date.date() + timedelta(days=cil_validity_period)
            else:
                rec.expiry_date = fields.Date.today() + timedelta(days=cil_validity_period)
                



    def cron_update_state(self):
        records=self.search([('expiry_date','!=',False)])
        records._update_state()

    def _update_state(self):
        for rec in self:
            if rec.expiry_date and (fields.Date.today() > rec.expiry_date) :
                rec.state = 'expired'
            else:
                rec.state = 'active'

        
    def _compute_duration_info(self):

        for rec in self:
            # if  rec.expiry_date >= fields.Date.today():
            if  rec.expiry_date:
                
                remaining_period = fields.Date.today() - rec.expiry_date
                days = remaining_period.days
                hours = floor(remaining_period.seconds / 3600)
                rec.duration_info = (f" Remaining {abs(days)} days to expire ") if days < 0 else (f" Expired {days} days ago ")
            else:
                rec.duration_info=""




==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
from odoo import _, api, fields, models
from odoo.exceptions import ValidationError
class CilConfig(models.Model):
    _name = 'cil.config'
    _description = 'Cil Config'
    

    notified_user_ids= fields.Many2many('res.users',string="Notified Users")

    activity_type_id= fields.Many2one('mail.activity.type',string="Activity Type")
    activity_summary= fields.Char(string="Activity Summary")
    
    
    @api.constrains('notified_user_ids')
    def _check_email_required(self):
        for record in self:
            for user in record.notified_user_ids:
                if not user.partner_id.email:
                    raise ValidationError(f"User {user.partner_id.name} must have an email address.")
                    
                    


    cil_validity_period = fields.Integer(string="CIL Validity Period", help='The validity period after which the CIL can be converted to direct lead')

    action_server_ids = fields.Many2many(comodel_name="ir.actions.server", string="Actions")




    @api.model
    def create(self,vals):
        if len(self.search([])) > 0 : raise ValidationError('There already exists a configuration for cil')

        return super(CilConfig,self).create(vals)



==============================================================================================================================


<?xml version="1.0" encoding="utf-8"?>
<odoo>


    <data>
        <record id="ir_cron_scheduler_recurring_action" model="ir.cron">
            <field name="name">CIL: update is expired</field>
            <field name="model_id" ref="model_cil_cil" />
            <field name="state">code</field>
            <field name="code"> model.cron_update_state()</field>

            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="numbercall">-1</field>
            <field name="doall">True</field>
            <field name="nextcall" eval="(DateTime.now().replace(hour=22,minute=1,second=0) ).strftime('%Y-%m-%d %H:%M:%S')" />
        </record>


    </data>


</odoo>




==============================================================================================================================





****************************** ++++++++++++++++++++++++++++++++ ************************************

    def action_create_step_approval(self,inverse_name):
        for step in self:
            approval= [{"type_id":step.type_id.id,inverse_name:step[inverse_name].id,'step_id':step.id,'name':step.type_id.name}]
            self.env['contract.multi.approval'].create(approval).action_submit()
            








****************************** wizard ************************************

        <record id="ft_divorce_wife_wizard_view_form" model="ir.ui.view">
            <field name="name">ft.divorce.wife.wizard.view.form</field>
            <field name="model">ft.divorce.wife.wizard</field>
            <field name="arch" type="xml">
                <form >
                    <sheet>
                        <group>
                            <field name="husband_id" readonly="1" />
                            <field name="wife_id"  />
                        </group>
                    </sheet>
                    <footer>
                        <button name="action_divorce_wife" string="Divorce Wife" type="object" class="btn-primary" data-hotkey="q" />
                        <button string="Cancel" class="btn-secondary" special="cancel" data-hotkey="z" />
                    </footer>
                </form>
            </field>
        </record>





****************************** send sms ***********************************
            self.env['sms.sms'].create({'partner_id':my_otp.res_id,'number':my_otp.phone_number,'body':f"Your OTP for verification is: {my_otp.otp}"})._send()










******************************* search domain ************************************

Search domains
A domain is a list of criteria, each criterion being a triple (either a list or a tuple) of (field_name, operator, value) where:

field_name (str)
a field name of the current model, or a relationship traversal through a Many2one using dot-notation e.g. 'street' or 'partner_id.country'

operator (str)
an operator used to compare the field_name with the value. Valid operators are:

=
equals to

!=
not equals to

>
greater than

>=
greater than or equal to

<
less than

<=
less than or equal to

=?
unset or equals to (returns true if value is either None or False, otherwise behaves like =)

=like
matches field_name against the value pattern. An underscore _ in the pattern stands for (matches) any single character; a percent sign % matches any string of zero or more characters.

like
matches field_name against the %value% pattern. Similar to =like but wraps value with ‘%’ before matching

not like
doesn’t match against the %value% pattern

ilike
case insensitive like

not ilike
case insensitive not like

=ilike
case insensitive =like

in
is equal to any of the items from value, value should be a list of items

not in
is unequal to all of the items from value

child_of
is a child (descendant) of a value record (value can be either one item or a list of items).

Takes the semantics of the model into account (i.e following the relationship field named by _parent_name).

parent_of
is a parent (ascendant) of a value record (value can be either one item or a list of items).

Takes the semantics of the model into account (i.e following the relationship field named by _parent_name).

any
matches if any record in the relationship traversal through field_name (Many2one, One2many, or Many2many) satisfies the provided domain value.

not any
matches if no record in the relationship traversal through field_name (Many2one, One2many, or Many2many) satisfies the provided domain value.

value
variable type, must be comparable (through operator) to the named field.

Domain criteria can be combined using logical operators in prefix form:

'&'
logical AND, default operation to combine criteria following one another. Arity 2 (uses the next 2 criteria or combinations).

'|'
logical OR, arity 2.

'!'
logical NOT, arity 1.









****************************** ++++++++++++++++++++++++++++++++ ************************************







        <div id="wrap">
                    <div class="container">
                        <div class="col-md-12">
                            <h2>Customer Service Visits</h2>
                            <!-- <form action="/visits/form/submit" class="visits_otp_form" enctype="multipart/form-data" method="post"> -->


                                <div class="form-group" style="margin:15px;">
                                    <label for="phone_number">Phone:</label>
                                    <input type="text" inputmode="numeric" default_focus="1" class="form-control" name="phone_number" id="phone_number" required="true" style=" height: 35px;" />
                                </div>
                                <div class="form-group" style="margin:15px;">
                                    <input type="text" default_focus="1"  name="correct_phone_number" id="correct_phone_number" style="display:none;" />
                                </div>
                                <button id="start_journey" class="btn btn-primary" style="margin:15px;" t-on-click="palert">Start</button>

                                <div class="col-md-12">
                                    <div class="alert alert-warning" style="display:none;">
                                    This number isn't in our database
                                    </div>
                                </div>

                                <div id="otp_div" class="form-group" style="margin:15px; display:none;">
                                    <label for="otp">OTP:</label>
                                    <input type="text" inputmode="numeric"  name="otp" id="otp" required="true" style=" height: 35px;" />
                                </div>
                                <div class="col-md-12">
                                    <div id="otp_error_div" class="alert alert-danger" style="display:none;">
                                    Wrong </div>
                                </div>



                                <!-- <div class="form-group" style="margin:15px;">
                                <label for="description">Description:</label>
                                <input type="text"  name="description" id="description" required="true" t-att-value="name" />
                            </div> -->
                                <button id="generate_otp" class="btn btn-primary" style="margin:15px;display:none;">Genrate OTP</button>
                                <div class="col-md-12">
                                    <div class="alert alert-danger" style="display:none;">
                                    Failed To Send OTP 
                                    </div>
                                </div>
                                <button id="authenticate" class="btn btn-primary" style="margin:15px;display:none;">Authenticate</button>



                                <div id="visit_info" style="display:none;">




                                    <div class="form-group" style="margin:15px;">
                                        <label for="unit_id">Unit:</label>
                                        <select id="unit_id" name="unit_id" required="True"  style=" height: 35px;">
                                            <t t-foreach="units" t-as="unit">
                                                <option t-att-value="unit.id" t-esc="unit.name"/>
                                            </t>
                                        </select>
                                    </div>





                                    <div class="form-group" style="margin:15px;">
                                        <label for="category_id">Category:</label>
                                        <select id="category_id" name="helpdesk_category_id" required="True"  style=" height: 35px;">
                                            <t t-foreach="categories" t-as="category">
                                                <option t-att-value="category.id" t-esc="category.name"/>
                                            </t>
                                        </select>
                                    </div>
                                    <div class="form-group" style="margin:15px;">
                                        <label for="team_id">Team:</label>
                                        <select id="team_id" name="helpdesk_team_id" required="True"  style=" height: 35px;">
                                            <t t-foreach="teams" t-as="team">
                                                <option t-att-value="team.id" t-esc="team.name"/>
                                            </t>
                                        </select>
                                    </div>
                                    <div class="form-group" style="margin:15px;">
                                        <label for="time_id">Visit Time:</label>
                                        <select id="time_id" name="date_time_selection" required="True"  style=" height: 35px;">
                                            <t t-foreach="available_times" t-as="time">
                                                <option t-att-value="time.id" t-esc="time.name"/>
                                            </t>
                                        </select>
                                    </div>
                                    <!-- <div class="form-group" style="margin:15px;">
                                <label for="description">Description:</label>
                                <input type="text" class="form-control" name="description" id="description" required="true" t-att-value="name" />
                            </div> -->
                                    <button type="submit" class="btn btn-primary" style="margin:15px;">Submit</button>



                                </div>






                            <!-- </form> -->
                        </div>
                    </div>
                </div>











****************************** ++++++++++++++++++++++++++++++++ *******************************


https://www.odoo.com/thanks/trial?app=website%3Acrm%3Asale_management%3Aaccount_accountant%3Ahelpdesk&dbname=shahin2&re=https%3A%2F%2Feu320a.odoo.com%2Fsaas_worker%2Ftrial_do%3Flang%3Den_US%26module%3Dwebsite%253Acrm%253Asale_management%253Aaccount_accountant%253Ahelpdesk%26template%3D%26studio_module%3D%26dbname%3Dshahin2%26client_id%3Df0247ae4-e1c7-47a5-860e-60323a7a9919%26country_code%3DEG%26company_name%3Dshahin%26email%3Dmoustafashahin122%2540gmail.com%26sync_after_creation%3DFalse%26username%3DMoustafa%2BShahin%26confirm_token%3DgAAAAABmH-tFN-YlvEcuZBS5SzONuDtVfrrUWCU-1dEjeJz-nZdlYqTtfvORibGCqyJBosMiGxCOMkFZntF_NUeU8EClcfXZzZ0ZLmmZkLXniu69t6-kQv7cWLdXWCgcf9SzoBFWTicw%26_ms%3DgAAAAABmH-tFN_63FO-xtywvcnI-42en4LY1EZmgF7BmZZAHCR7-8w3p8ecSnYjrwdZVQ4D--5jtjt7Z86IpURddv5ptfrW3BFUKpaTtCZ-AX02JYpq_GHGwTfWnZSfzj2wFHc3LJGm607e9LDxjTgRxQNbmIAGjVfcXfmrbrAxjfxZhppqsRck%253D





*********************************** show image in a template ************************************



                        <img t-attf-src="data:image;base64,{{workflow.image}}" class="menu-img img-fluid" />
                    <field name="image" widget="image" class="rounded" options="{'size': [90, 90]}"/>


                                    <img t-att-src="kanban_image('workflow.workflow', 'image', record.id.raw_value)" class="w-100 rounded" alt="Icon"/>

****************************** ++++++++++++++++++++++++++++++++ ************************************



upgrade
button_immediate_upgrade
****************************** add user and group ***********************************

       <record id="user_client_admin" model="res.users">
            <field name="name">Client Admin</field>
            <field name="login">client_admin</field>
            <field name="password">client_admin</field>
        </record>

        <record id="group_client_admin" model="res.groups">
            <field name="name">Client Admin Group</field>
            <field name="implied_ids" eval="[Command.link(ref('base.group_user'))]"/>

            <field name="users" eval="[ (4, ref('workflow_users.user_client_admin'))]"/>


        </record>




******************************* refused ************************************

    state = fields.Selection(
        [('Draft', 'Draft'),
         ('Submitted', 'Submitted'),
         ('Approved', 'Approved'),
         ('Refused', 'Refused'),
         ('Cancel', 'Cancel')], default='Draft', tracking=True)






****************************** ++++++++++++++++++++++++++++++++ ************************************



booking_request_invoicing
booking_request_payment
real_estate_inventory

approval_for_multiple_things
contract_management

****************************** ++++++++++++++++++++++++++++++++ **********************************



uninstall
booking_request_invoicing *if installed
please install
booking_request_payment
please upgrade
real_estate_inventory
finance
finance_advanced
approval_for_multiple_things
contract_management
generic_contract





******************************** ++++++++++++++++++++++++++++++++ ************************************



from odoo import _, api, fields, models


class PaymentPlanPayment(models.AbstractModel):
    _name = 'finance.payment'
    _description = 'Payment plan payment'
    _order = 'sequence asc'



class PolicyBulkPayments(models.AbstractModel):
    _name = 'finance.payment_plan_structure_bulk_payments'
    _description = "Payment Plan Bulk Payments"
    _order = 'sequence asc'
    
    
    

class PaymentPlan(models.AbstractModel):
    _name = 'finance.payment_plan'
    _description = 'Real Estate Payment Plans'

****************************** Kanban view ribbon ************************************
  <kanban
                    string="Automation Rules"
                    class="o_base_automation_kanban_view"
                    records_draggable="false"
                    groups_draggable="false"
                    quick_create="false"
                    group_create="false"
                    group_edit="false"
                    group_delete="false"
                >
                    <templates>
                        <t t-name="kanban-box">
                            <div class="oe_kanban_global_click">
                                <field name="active" invisible="1" />
                                <field name="model_name" invisible="1" />
                                <widget name="web_ribbon" title="Archived" bg_color="text-bg-danger" invisible="active" />
                                <div class="d-flex flex-column flex-md-row gap-3 flex-grow-1">
****************************** ++++++++++++++++++++++++++++++++ ******************************************

************************ kanban view in form view ************************************




                        <field name="contract_partner_ids" mode="kanban" readonly="1"/>

****************************** date range ************************************



                                <label for="date_from" string="Dates"
                                />
                                <div class="o_row">
                                    <field name="date_from" widget="date" />
                                    <i class="fa fa-long-arrow-right" title="to" />
                                    <field name="date_to" widget="date" />
                                </div>
****************************** status bar visible ************************************
                        <field name="state" widget="statusbar" statusbar_visible="draft,submitted,approved" options="{'clickable':'1'}"

****************************** search with data ************************************
def cron_separation_status(self):
        birthdate_of_25_years_old=fields.Date.today()-relativedelta(years=25)
        warning_date =  birthdate_of_25_years_old+relativedelta(months=12 - self._separation_warning_month)


        
        records= self.search([('membership_status','=','active'),('parent_membership_id','!=',False),('birthdate','<=',warning_date)])

        records._compute_separtion_status(birthdate_of_25_years_old,warning_date)


****************************** ++++++++++++++++++++++++++++++++ ************************************
        <record id="product_template_tree_view_inherit" model="ir.ui.view">
            <field name="name">product.template.view.form.inherit</field>
            <field name="model">product.template</field>
            <field name="inherit_id" ref="product.product_template_tree_view" />
            <field name="arch" type="xml">
                <xpath expr="//header" position="inside">

                    <button string="Academy Partners" name="action_view_academy_partners"
                        type="object"
                        class="oe_highlight" />
                </xpath>
            </field>
        </record>

****************************** git first and last day of month ************************************
from dateutil.relativedelta import relativedelta

last_date_of_month = datetime(mydate.year, mydate.month, 1) + relativedelta(months=1, days=-1)

****************************** get date from string ************************************

        start_date = datetime.strptime(kw.get('start_date'), '%Y-%m-%d').date()

****************************** search dates ************************************

    def cron_separation_status(self):
        birthdate_of_25_years_old=fields.Date.today()-relativedelta(years=25)
        warning_date =  birthdate_of_25_years_old+relativedelta(months=12 - self._separation_warning_month)

        records_to_separate = self.search([('membership_status','=','active'),('parent_membership_id','!=',False),('birthdate','<=',birthdate_of_25_years_old)])
        records_to_separate.write({'separation_required':True,'separation_warning':False})
        
        records_to_warn= self.search([('membership_status','=','active'),('parent_membership_id','!=',False),('separation_required','=',False),('birthdate','<=',warning_date),('birthdate','>',birthdate_of_25_years_old)])
        records_to_warn.write({'separation_warning':True})


****************************** js import  ********************************



Odoo needs a way to determine if a module is described by a path (like ./views/form_view) or a name (like web.FormView). It has to use a heuristic to do just that: if there is a / in the name, it is considered a path. This means that Odoo does not really support module names with a / anymore.


odoo.define(
  "sport_academies.academy_subscription_form",

  function (require) {
    "use strict";

    const publicWidget = require("web.public.widget");


    const { useService } = require("@web/core/utils/hooks");





/** @odoo-module **/

import publicWidget from "@web/legacy/js/public/public_widget";
console.log("🚀 ~ file: copy_link.js:2 ~ publicWidget:", publicWidget);

publicWidget.registry.CopyLink = publicWidget.Widget.extend({
  selector: "#copy-webpage-btn",
  events: {
    click: "_onClickCopyLink",
  },

  init() {
    this._super(...arguments);
    this.notification = this.bindService("notification");
    console.log("🚀 ~ file: copy_link.js:15 ~ init ~ this.notification:", this.notification)
  },



********************************** Translate ************************************

                // "-l",
                // "ar_EG",
                // "--i18n-export",
                // "/opt/odoo15/odoo15/epm-betaegypt/metrics_enterprise/sport_academies/i18n/ar_001.pot",
                // "--modules",
                // "sport_academies",


****************************** assets in odoo ************************************








'assets': {
    'web.assets_backend': [
        'web/static/src/xml/**/*',
    ],
    'web.assets_common': [
        'web/static/lib/bootstrap/**/*',
        'web/static/src/js/boot.js',
        'web/static/src/js/webclient.js',
        'web/static/src/xml/webclient.xml',
    ],
    'web.qunit_suite_tests': [
        'web/static/src/js/webclient_tests.js',
    ],
},
****************************** add admin admin ************************************

UPDATE public.res_users
SET active=true, login='ccccccccccc'
WHERE login='admin';

UPDATE public.res_users
SET active=true, login='admin', "password"='admin'
WHERE login='yussuf@metrics.com.eg';






****************************** PDF Report ************************************

preview
http://localhost:8015/report/pdf/assets_pdf_report.asset_report_temp/324






    <template id="asset_report_temp">
        <t t-call="web.html_container">
            <t t-foreach="docs" t-as="o">
                <t t-call="web.internal_layout">
                    <div class="page">
                        <div class="oe_structure" />
                        <h2>Product Report</h2>
                        <p>
                            <span t-field="o.name" />
                        </p>
                    </div>
                </t>
            </t>
        </t>
    </template>


    <record id="action_report_asset" model="ir.actions.report">
        <field name="name">Asset Report</field>
        <field name="model">account.asset.asset</field>
        <field name="report_type">qweb-pdf</field>
        <field name="report_name">assets_pdf_report.asset_report_temp</field>
        <field name="report_file">assets_pdf_report.asset_report_temp</field>
        <field name="print_report_name">'Asset-%s' % object.name</field>
        <field name="binding_model_id" ref="om_account_asset.model_account_asset_asset" />
        <field name="binding_type">report</field>
    </record>
****************************** order_id ************************************
product_template  in product_id product_tmpl_id


        line=self.env['sale.order.line'].create({'order_id':self._origin.id,'product_template_id':self.unit_id.id,'price_unit':self.expected_revenue, 'product_uom_qty': 1.0,'name':self.unit_id.name,'product_id':self.unit_id.product_variant_id.id})

****************************** xlsx report *********************************************
install report_xlsx module 

from odoo import models

class PartnerXlsx(models.AbstractModel):
    _name = 'report.bank_sheet_xlsx_report.report_name'
    _inherit = 'report.report_xlsx.abstract'

    def generate_xlsx_report(self, workbook, data, partners):
        for obj in partners:
            report_name = obj.name
            # One sheet by partner
            sheet = workbook.add_worksheet(report_name[:31])
            bold = workbook.add_format({'bold': True})
            sheet.write(0, 0, obj.name, bold)








    <record id="action_report_partner_xlsx" model="ir.actions.report">
        <field name="name">Print to XLSX</field>
        <field name="model">res.partner</field>
        <field name="report_type">xlsx</field>
        <field name="report_name">bank_sheet_xlsx_report.report_name</field>
        <field name="report_file">bank_sheet_xlsx_report.report_file</field>
        <field name="binding_model_id" ref="base.model_res_partner" />
        <field name="binding_type">report</field>
        <field name="attachment_use" eval="False" />
    </record>



********************* external dependancy ************************************

'external_dependencies': {
        'python': ['pypeg2']
    }









****************************** override _name_search ************************************
    @api.model
    def _name_search(self, name, args=None, operator='ilike', limit=100, name_get_uid=None):
        args = args or []
        if name:
            args = args + ['|', ('name', operator, name), ('salesman_ref', operator, name)] 
        return super(HrEmployeePublic, self)._search(args, limit=limit, access_rights_uid=name_get_uid)
    



****************************** automate xlsx report with report_xlsx ************************************


from odoo import models

class PartnerXlsx(models.AbstractModel):
    _name = 'report.bank_sheet_xlsx_report.bank_sheet_xlsx'
    _inherit = 'report.report_xlsx.abstract'

    def generate_xlsx_report(self, workbook, data, entries):
        headers_dict={'bank_name':'Bank Name','account_number':'Account Number','employee_name':'Employee Name','identification_id':'National ID Number','net_salary':'Salary','basic_salary':'Basic Salary','housing_allowance':'Housing Allowance','transportation_allowance':'Transportation Allowance','other_earnings':'Other Earnings','deductions':'Deduction','employee_remarks':'Employee Remarks','department_name':'Employee Department'}
        report_name = "Bank Sheet"
        sheet = workbook.add_worksheet(report_name[:31])
        bold = workbook.add_format({'bold': True})
        for index ,header in enumerate(headers_dict.values()):
            sheet.write(0, index, header, bold)
        all_fields= entries.fields_get()
        for index, entry in enumerate(entries): 
            for header_index ,header in enumerate(headers_dict.keys()):
                if header in all_fields:
                    sheet.write(2+index,header_index,entry[header]) 
                else:
                    sheet.write(2+index,header_index,'N/P') 





****************************** sql Query ************************************

            update_query=""" update stock_valuation_layer 
                            set create_date = %(rec_date_done)s
                            where stock_move_id in %(stock_move_ids)s
"""
            self.env.cr.execute(update_query,{'rec_date_done': rec_date_done,'stock_move_ids': tuple(rec.move_ids.ids)})
            # self.env.cr.execute("""
            #     select * from stock_valuation_layer where stock_move_id in %(stock_move_ids)s
            # """,{'stock_move_ids': tuple(rec.move_ids.ids)})
            # res = self.env.cr.fetchall()
            self.env.cr.commit()

            self._invalidate_cache()
****************************** paymob test credintials ************************************






	5123456789012346
12 25 123
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ****************************************************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
****************************** ++++++++++++++++++++++++++++++++ ************************************
